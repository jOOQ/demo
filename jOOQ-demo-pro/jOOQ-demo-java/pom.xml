<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.jooq.trial</groupId>
        <artifactId>jooq-demo</artifactId>
        <version>3.19.18</version>
    </parent>

    <artifactId>jooq-demo-java</artifactId>
    <name>jOOQ Demo Java (Trial Edition)</name>

    <dependencies>

        <!-- Demo utilities -->
        <dependency>
            <groupId>org.jooq.trial</groupId>
            <artifactId>jooq-demo-utils</artifactId>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <type>jar</type>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>

            <!-- Much better if there was a testcontainers lifecycle management plugin!
                 Upvote here if you like the idea: https://github.com/testcontainers/testcontainers-java/issues/4397 -->
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.jooq.trial</groupId>
                <artifactId>jooq-codegen-maven</artifactId>

                <!-- More shared defaults are defined in the parent pom.xml -->
                <configuration>
                    <generator>
                        <generate>
                            <pojosAsJavaRecordClasses>true</pojosAsJavaRecordClasses>
                        </generate>
                        <target>
                            <!-- We're version controlling the source code for better documentation on github, etc.
                                 This isn't necessary, though, see also:
                                 https://www.jooq.org/doc/latest/manual/code-generation/codegen-version-control/ -->
                            <directory>src/main/java</directory>
                        </target>
                    </generator>
                </configuration>

                <executions>
                    <execution>
                        <id>generate-demo-java</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <generator>
                                <database>
                                    <forcedTypes>

                                        <!-- Virtual client side computed columns are client side computed columns that are
                                             based on synthetic column declarations (see above)

                                             See: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-forced-types/codegen-database-forced-types-computed/
                                             -->
                                        <forcedType>
                                            <generator>ctx -> DSL.concat(FIRST_NAME, DSL.inline(" "), LAST_NAME)</generator>
                                            <includeExpression>full_name</includeExpression>
                                        </forcedType>
                                        <forcedType>
                                            <generator>ctx -> DSL.concat(address().ADDRESS_, DSL.inline(", "), address().POSTAL_CODE, DSL.inline(", "), address().city().CITY_, DSL.inline(", "), address().city().country().COUNTRY_)</generator>
                                            <includeExpression>full_address</includeExpression>
                                        </forcedType>
                                    </forcedTypes>
                                </database>

                                <target>
                                    <packageName>org.jooq.demo.java.db</packageName>
                                </target>
                            </generator>
                        </configuration>
                    </execution>

                    <execution>
                        <id>generate-demo-java-ddl</id>
                        <phase>generate-sources</phase>
                        <goals>
                           <goal>generate</goal>
                        </goals>
                        <configuration>
                            <generator>
                                <database>
                                    <!-- The DDLDatabase simulates your database migrations and generates code from
                                         this simulation without connecting to an actual database instance. Use this
                                         to speed up code generation, if you're not using too many vendor specific features.

                                         More info: https://www.jooq.org/doc/latest/manual/code-generation/codegen-ddl/ -->
                                    <name>org.jooq.meta.extensions.ddl.DDLDatabase</name>
                                    <properties>
                                        <property>

                                            <!-- Alternatively, use scripts to reference your DDL scripts on the file system -->
                                            <key>sql</key>
                                            <value>
                                                CREATE TABLE parent (parent_id int primary key, val int);
                                                CREATE TABLE child (child_id int primary key, parent_id int references parent, val int);
                                            </value>
                                        </property>
                                    </properties>
                                </database>
                                <target>
                                    <packageName>org.jooq.demo.java.ddl</packageName>
                                </target>
                            </generator>
                        </configuration>
                    </execution>
                </executions>

                <dependencies>

                    <!-- This is needed for the DDLDatabase -->
                    <dependency>
                        <groupId>org.jooq.trial</groupId>
                        <artifactId>jooq-meta-extensions</artifactId>
                        <version>${jooq.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>
</project>