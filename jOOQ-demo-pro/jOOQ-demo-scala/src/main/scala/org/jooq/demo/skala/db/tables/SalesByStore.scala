/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.String
import java.math.BigDecimal
import java.util.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.records.SalesByStoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object SalesByStore {

  /**
   * The reference instance of <code>public.sales_by_store</code>
   */
  val SALES_BY_STORE = new SalesByStore
}

/**
 * This class is generated by jOOQ.
 */
class SalesByStore(
  alias: Name,
  path: Table[? <: Record],
  childPath: ForeignKey[? <: Record, SalesByStoreRecord],
  parentPath: InverseForeignKey[? <: Record, SalesByStoreRecord],
  aliased: Table[SalesByStoreRecord],
  parameters: Array[ Field[?] ],
  where: Condition
)
extends TableImpl[SalesByStoreRecord](
  alias,
  Public.PUBLIC,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.view("""
  CREATE VIEW "sales_by_store" AS  SELECT (((c.city)::text || ','::text) || (cy.country)::text) AS store,
    (((m.first_name)::text || ' '::text) || (m.last_name)::text) AS manager,
    sum(p.amount) AS total_sales
   FROM (((((((payment p
     JOIN rental r ON ((p.rental_id = r.rental_id)))
     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))
     JOIN store s ON ((i.store_id = s.store_id)))
     JOIN address a ON ((s.address_id = a.address_id)))
     JOIN city c ON ((a.city_id = c.city_id)))
     JOIN country cy ON ((c.country_id = cy.country_id)))
     JOIN staff m ON ((s.manager_staff_id = m.staff_id)))
  GROUP BY cy.country, c.city, s.store_id, m.first_name, m.last_name
  ORDER BY cy.country, c.city;
  """),
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[SalesByStoreRecord] = classOf[SalesByStoreRecord]

  /**
   * The column <code>public.sales_by_store.store</code>.
   */
  val STORE: TableField[SalesByStoreRecord, String] = createField(DSL.name("store"), SQLDataType.CLOB, "")

  /**
   * The column <code>public.sales_by_store.manager</code>.
   */
  val MANAGER: TableField[SalesByStoreRecord, String] = createField(DSL.name("manager"), SQLDataType.CLOB, "")

  /**
   * The column <code>public.sales_by_store.total_sales</code>.
   */
  val TOTAL_SALES: TableField[SalesByStoreRecord, BigDecimal] = createField(DSL.name("total_sales"), SQLDataType.NUMERIC, "")

  private def this(alias: Name, aliased: Table[SalesByStoreRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[SalesByStoreRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.sales_by_store</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.SalesByStore.SALES_BY_STORE)

  /**
   * Create an aliased <code>public.sales_by_store</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.SalesByStore.SALES_BY_STORE)

  /**
   * Create a <code>public.sales_by_store</code> table reference
   */
  def this() = this(DSL.name("sales_by_store"), null)

  override def getSchema: Schema = if (super.aliased()) null else Public.PUBLIC
  override def as(alias: String): SalesByStore = new SalesByStore(DSL.name(alias), this)
  override def as(alias: Name): SalesByStore = new SalesByStore(alias, this)
  override def as(alias: Table[?]): SalesByStore = new SalesByStore(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): SalesByStore = new SalesByStore(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): SalesByStore = new SalesByStore(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[?]): SalesByStore = new SalesByStore(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): SalesByStore = new SalesByStore(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[? <: Condition]): SalesByStore = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): SalesByStore = where(DSL.and(conditions*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): SalesByStore = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): SalesByStore = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): SalesByStore = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): SalesByStore = where(DSL.condition(condition, binds*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[?]): SalesByStore = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[?]): SalesByStore = where(DSL.notExists(select))
}
