/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.Arrays
import java.util.Collection
import java.util.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.Trigger
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Indexes
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.Triggers
import org.jooq.demo.skala.db.tables.Film.FilmPath
import org.jooq.demo.skala.db.tables.FilmActor.FilmActorPath
import org.jooq.demo.skala.db.tables.records.ActorRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Actor {

  /**
   * The reference instance of <code>public.actor</code>
   */
  val ACTOR = new Actor

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  class ActorPath(path: Table[? <: Record], childPath: ForeignKey[? <: Record, ActorRecord], parentPath: InverseForeignKey[? <: Record, ActorRecord]) extends Actor(path, childPath, parentPath) with Path[ActorRecord]
}

/**
 * This class is generated by jOOQ.
 */
class Actor(
  alias: Name,
  path: Table[? <: Record],
  childPath: ForeignKey[? <: Record, ActorRecord],
  parentPath: InverseForeignKey[? <: Record, ActorRecord],
  aliased: Table[ActorRecord],
  parameters: Array[ Field[?] ],
  where: Condition
)
extends TableImpl[ActorRecord](
  alias,
  Public.PUBLIC,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table,
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[ActorRecord] = classOf[ActorRecord]

  /**
   * The column <code>public.actor.actor_id</code>.
   */
  val ACTOR_ID: TableField[ActorRecord, Long] = createField(DSL.name("actor_id"), SQLDataType.BIGINT.nullable(false).identity(true), "")

  /**
   * The column <code>public.actor.first_name</code>.
   */
  val FIRST_NAME: TableField[ActorRecord, String] = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.actor.last_name</code>.
   */
  val LAST_NAME: TableField[ActorRecord, String] = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.actor.last_update</code>.
   */
  val LAST_UPDATE: TableField[ActorRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).readonly(true).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), "")

  private def this(alias: Name, aliased: Table[ActorRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[ActorRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.actor</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.Actor.ACTOR)

  /**
   * Create an aliased <code>public.actor</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.Actor.ACTOR)

  /**
   * Create a <code>public.actor</code> table reference
   */
  def this() = this(DSL.name("actor"), null)

  def this(path: Table[? <: Record], childPath: ForeignKey[? <: Record, ActorRecord], parentPath: InverseForeignKey[? <: Record, ActorRecord]) = this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, org.jooq.demo.skala.db.tables.Actor.ACTOR, null, null)

  override def getSchema: Schema = if (super.aliased()) null else Public.PUBLIC

  override def getIndexes: List[Index] = Arrays.asList[ Index ](Indexes.IDX_ACTOR_LAST_NAME)

  override def getIdentity: Identity[ActorRecord, Long] = super.getIdentity.asInstanceOf[ Identity[ActorRecord, Long] ]

  override def getPrimaryKey: UniqueKey[ActorRecord] = Keys.ACTOR_PKEY

  /**
   * Get the implicit to-many join path to the <code>public.film_actor</code>
   * table
   */
  lazy val filmActor: FilmActorPath = { new FilmActorPath(this, null, Keys.FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit many-to-many join path to the <code>public.film</code>
   * table
   */
  def film: FilmPath = filmActor.film
  override def getTriggers: List[Trigger] = Arrays.asList[Trigger](Triggers.LAST_UPDATED)
  override def as(alias: String): Actor = new Actor(DSL.name(alias), this)
  override def as(alias: Name): Actor = new Actor(alias, this)
  override def as(alias: Table[?]): Actor = new Actor(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Actor = new Actor(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Actor = new Actor(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[?]): Actor = new Actor(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): Actor = new Actor(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[? <: Condition]): Actor = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): Actor = where(DSL.and(conditions*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): Actor = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): Actor = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): Actor = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): Actor = where(DSL.condition(condition, binds*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[?]): Actor = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[?]): Actor = where(DSL.notExists(select))
}
