/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.daos


import java.lang.Deprecated
import java.lang.Integer
import java.lang.Long
import java.lang.Object
import java.lang.Short
import java.lang.String
import java.math.BigDecimal
import java.time.LocalDateTime
import java.util.Collection
import java.util.List

import org.jooq.Configuration
import org.jooq.demo.skala.db.enums.MpaaRating
import org.jooq.demo.skala.db.tables.Film
import org.jooq.demo.skala.db.tables.records.FilmRecord
import org.jooq.impl.DAOImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
class FilmDao(configuration: Configuration) extends DAOImpl[FilmRecord, org.jooq.demo.skala.db.tables.pojos.Film, Long](Film.FILM, classOf[org.jooq.demo.skala.db.tables.pojos.Film], configuration) {

  /**
   * Create a new FilmDao without any configuration
   */
  def this() = this(null)

  override def getId(o: org.jooq.demo.skala.db.tables.pojos.Film): Long = o.getFilmId
  override def insert(obj: org.jooq.demo.skala.db.tables.pojos.Film): Unit = super.insert(obj)
  override def insert(objs: org.jooq.demo.skala.db.tables.pojos.Film*): Unit = super.insert(objs*)
  override def insert(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Film]): Unit = super.insert(objs)
  override def update(obj: org.jooq.demo.skala.db.tables.pojos.Film): Unit = super.update(obj)
  override def update(objs: org.jooq.demo.skala.db.tables.pojos.Film*): Unit = super.update(objs*)
  override def update(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Film]): Unit = super.update(objs)
  override def merge(obj: org.jooq.demo.skala.db.tables.pojos.Film): Unit = super.merge(obj)
  override def merge(objs: org.jooq.demo.skala.db.tables.pojos.Film*): Unit = super.merge(objs*)
  override def merge(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Film]): Unit = super.merge(objs)
  override def delete(obj: org.jooq.demo.skala.db.tables.pojos.Film): Unit = super.delete(obj)
  override def delete(objs: org.jooq.demo.skala.db.tables.pojos.Film*): Unit = super.delete(objs*)
  override def delete(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Film]): Unit = super.delete(objs)
  override def deleteById(id: Long): Unit = super.deleteById(id)
  override def deleteById(ids: Long*): Unit = super.deleteById(ids*)
  override def deleteById(ids: Collection[Long]): Unit = super.deleteById(ids)

  /**
   * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfFilmId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.FILM_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>film_id IN (values)</code>
   */
  def fetchByFilmId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.FILM_ID, values*)

  /**
   * Fetch a unique record that has <code>film_id = value</code>
   */
  def fetchOneByFilmId(value: Long): org.jooq.demo.skala.db.tables.pojos.Film = fetchOne(Film.FILM.FILM_ID, value)

  /**
   * Fetch records that have <code>title BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfTitle(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.TITLE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>title IN (values)</code>
   */
  def fetchByTitle(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.TITLE, values*)

  /**
   * Fetch records that have <code>description BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfDescription(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.DESCRIPTION, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>description IN (values)</code>
   */
  def fetchByDescription(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.DESCRIPTION, values*)

  /**
   * Fetch records that have <code>release_year BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfReleaseYear(lowerInclusive: Integer, upperInclusive: Integer): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.RELEASE_YEAR, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>release_year IN (values)</code>
   */
  def fetchByReleaseYear(values: Integer*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.RELEASE_YEAR, values*)

  /**
   * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLanguageId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.LANGUAGE_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>language_id IN (values)</code>
   */
  def fetchByLanguageId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.LANGUAGE_ID, values*)

  /**
   * Fetch records that have <code>original_language_id BETWEEN lowerInclusive
   * AND upperInclusive</code>
   */
  def fetchRangeOfOriginalLanguageId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.ORIGINAL_LANGUAGE_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>original_language_id IN (values)</code>
   */
  def fetchByOriginalLanguageId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.ORIGINAL_LANGUAGE_ID, values*)

  /**
   * Fetch records that have <code>rental_duration BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfRentalDuration(lowerInclusive: Short, upperInclusive: Short): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.RENTAL_DURATION, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>rental_duration IN (values)</code>
   */
  def fetchByRentalDuration(values: Short*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.RENTAL_DURATION, values*)

  /**
   * Fetch records that have <code>rental_rate BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfRentalRate(lowerInclusive: BigDecimal, upperInclusive: BigDecimal): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.RENTAL_RATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>rental_rate IN (values)</code>
   */
  def fetchByRentalRate(values: BigDecimal*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.RENTAL_RATE, values*)

  /**
   * Fetch records that have <code>length BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLength(lowerInclusive: Short, upperInclusive: Short): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.LENGTH, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>length IN (values)</code>
   */
  def fetchByLength(values: Short*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.LENGTH, values*)

  /**
   * Fetch records that have <code>replacement_cost BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfReplacementCost(lowerInclusive: BigDecimal, upperInclusive: BigDecimal): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.REPLACEMENT_COST, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>replacement_cost IN (values)</code>
   */
  def fetchByReplacementCost(values: BigDecimal*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.REPLACEMENT_COST, values*)

  /**
   * Fetch records that have <code>rating BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfRating(lowerInclusive: MpaaRating, upperInclusive: MpaaRating): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.RATING, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>rating IN (values)</code>
   */
  def fetchByRating(values: MpaaRating*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.RATING, values*)

  /**
   * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.LAST_UPDATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_update IN (values)</code>
   */
  def fetchByLastUpdate(values: LocalDateTime*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.LAST_UPDATE, values*)

  /**
   * Fetch records that have <code>special_features BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfSpecialFeatures(lowerInclusive: Array[String], upperInclusive: Array[String]): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.SPECIAL_FEATURES, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>special_features IN (values)</code>
   */
  def fetchBySpecialFeatures(values: Array[String]*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.SPECIAL_FEATURES, values*)

  /**
   * @deprecated Unknown data type. If this is a qualified, user-defined type,
   * it may have been excluded from code generation. If this is a built-in type,
   * you can define an explicit {@link org.jooq.Binding} to specify how this
   * type should be handled. Deprecation can be turned off using {@literal
   * <deprecationOnUnknownTypes/>} in your code generator configuration.
   */
  @Deprecated
  def fetchRangeOfFulltext(lowerInclusive: Object, upperInclusive: Object): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetchRange(Film.FILM.FULLTEXT, lowerInclusive, upperInclusive)

  /**
   * @deprecated Unknown data type. If this is a qualified, user-defined type,
   * it may have been excluded from code generation. If this is a built-in type,
   * you can define an explicit {@link org.jooq.Binding} to specify how this
   * type should be handled. Deprecation can be turned off using {@literal
   * <deprecationOnUnknownTypes/>} in your code generator configuration.
   */
  @Deprecated
  def fetchByFulltext(values: Object*): List[org.jooq.demo.skala.db.tables.pojos.Film] = fetch(Film.FILM.FULLTEXT, values*)
}
