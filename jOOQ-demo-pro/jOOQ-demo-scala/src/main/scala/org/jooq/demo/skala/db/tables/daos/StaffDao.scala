/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.daos


import java.lang.Boolean
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.Collection
import java.util.List

import org.jooq.Configuration
import org.jooq.demo.skala.db.tables.Staff
import org.jooq.demo.skala.db.tables.records.StaffRecord
import org.jooq.impl.DAOImpl

import scala.Array
import scala.Byte


/**
 * This class is generated by jOOQ.
 */
class StaffDao(configuration: Configuration) extends DAOImpl[StaffRecord, org.jooq.demo.skala.db.tables.pojos.Staff, Long](Staff.STAFF, classOf[org.jooq.demo.skala.db.tables.pojos.Staff], configuration) {

  /**
   * Create a new StaffDao without any configuration
   */
  def this() = this(null)

  override def getId(o: org.jooq.demo.skala.db.tables.pojos.Staff): Long = o.getStaffId
  override def insert(obj: org.jooq.demo.skala.db.tables.pojos.Staff): Unit = super.insert(obj)
  override def insert(objs: org.jooq.demo.skala.db.tables.pojos.Staff*): Unit = super.insert(objs*)
  override def insert(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Staff]): Unit = super.insert(objs)
  override def update(obj: org.jooq.demo.skala.db.tables.pojos.Staff): Unit = super.update(obj)
  override def update(objs: org.jooq.demo.skala.db.tables.pojos.Staff*): Unit = super.update(objs*)
  override def update(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Staff]): Unit = super.update(objs)
  override def merge(obj: org.jooq.demo.skala.db.tables.pojos.Staff): Unit = super.merge(obj)
  override def merge(objs: org.jooq.demo.skala.db.tables.pojos.Staff*): Unit = super.merge(objs*)
  override def merge(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Staff]): Unit = super.merge(objs)
  override def delete(obj: org.jooq.demo.skala.db.tables.pojos.Staff): Unit = super.delete(obj)
  override def delete(objs: org.jooq.demo.skala.db.tables.pojos.Staff*): Unit = super.delete(objs*)
  override def delete(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Staff]): Unit = super.delete(objs)
  override def deleteById(id: Long): Unit = super.deleteById(id)
  override def deleteById(ids: Long*): Unit = super.deleteById(ids*)
  override def deleteById(ids: Collection[Long]): Unit = super.deleteById(ids)

  /**
   * Fetch records that have <code>staff_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfStaffId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.STAFF_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>staff_id IN (values)</code>
   */
  def fetchByStaffId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.STAFF_ID, values*)

  /**
   * Fetch a unique record that has <code>staff_id = value</code>
   */
  def fetchOneByStaffId(value: Long): org.jooq.demo.skala.db.tables.pojos.Staff = fetchOne(Staff.STAFF.STAFF_ID, value)

  /**
   * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfFirstName(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.FIRST_NAME, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>first_name IN (values)</code>
   */
  def fetchByFirstName(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.FIRST_NAME, values*)

  /**
   * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastName(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.LAST_NAME, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_name IN (values)</code>
   */
  def fetchByLastName(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.LAST_NAME, values*)

  /**
   * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfAddressId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.ADDRESS_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>address_id IN (values)</code>
   */
  def fetchByAddressId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.ADDRESS_ID, values*)

  /**
   * Fetch records that have <code>email BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfEmail(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.EMAIL, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>email IN (values)</code>
   */
  def fetchByEmail(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.EMAIL, values*)

  /**
   * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfStoreId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.STORE_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>store_id IN (values)</code>
   */
  def fetchByStoreId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.STORE_ID, values*)

  /**
   * Fetch records that have <code>active BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfActive(lowerInclusive: Boolean, upperInclusive: Boolean): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.ACTIVE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>active IN (values)</code>
   */
  def fetchByActive(values: Boolean*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.ACTIVE, values*)

  /**
   * Fetch records that have <code>username BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfUsername(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.USERNAME, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>username IN (values)</code>
   */
  def fetchByUsername(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.USERNAME, values*)

  /**
   * Fetch records that have <code>password BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfPassword(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.PASSWORD, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>password IN (values)</code>
   */
  def fetchByPassword(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.PASSWORD, values*)

  /**
   * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.LAST_UPDATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_update IN (values)</code>
   */
  def fetchByLastUpdate(values: LocalDateTime*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.LAST_UPDATE, values*)

  /**
   * Fetch records that have <code>picture BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfPicture(lowerInclusive: Array[Byte], upperInclusive: Array[Byte]): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.PICTURE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>picture IN (values)</code>
   */
  def fetchByPicture(values: Array[Byte]*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.PICTURE, values*)

  /**
   * Fetch records that have <code>full_address BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfFullAddress(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.FULL_ADDRESS, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>full_address IN (values)</code>
   */
  def fetchByFullAddress(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.FULL_ADDRESS, values*)

  /**
   * Fetch records that have <code>full_name BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfFullName(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetchRange(Staff.STAFF.FULL_NAME, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>full_name IN (values)</code>
   */
  def fetchByFullName(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Staff] = fetch(Staff.STAFF.FULL_NAME, values*)
}
