/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.Arrays
import java.util.Collection
import java.util.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.Category.CategoryPath
import org.jooq.demo.skala.db.tables.Film.FilmPath
import org.jooq.demo.skala.db.tables.records.FilmCategoryRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object FilmCategory {

  /**
   * The reference instance of <code>public.film_category</code>
   */
  val FILM_CATEGORY = new FilmCategory

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  class FilmCategoryPath(path: Table[? <: Record], childPath: ForeignKey[? <: Record, FilmCategoryRecord], parentPath: InverseForeignKey[? <: Record, FilmCategoryRecord]) extends FilmCategory(path, childPath, parentPath) with Path[FilmCategoryRecord]
}

/**
 * This class is generated by jOOQ.
 */
class FilmCategory(
  alias: Name,
  path: Table[? <: Record],
  childPath: ForeignKey[? <: Record, FilmCategoryRecord],
  parentPath: InverseForeignKey[? <: Record, FilmCategoryRecord],
  aliased: Table[FilmCategoryRecord],
  parameters: Array[ Field[?] ],
  where: Condition
)
extends TableImpl[FilmCategoryRecord](
  alias,
  Public.PUBLIC,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table,
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[FilmCategoryRecord] = classOf[FilmCategoryRecord]

  /**
   * The column <code>public.film_category.film_id</code>.
   */
  val FILM_ID: TableField[FilmCategoryRecord, Long] = createField(DSL.name("film_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.film_category.category_id</code>.
   */
  val CATEGORY_ID: TableField[FilmCategoryRecord, Long] = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.film_category.last_update</code>.
   */
  val LAST_UPDATE: TableField[FilmCategoryRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).readonly(true).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), "")

  private def this(alias: Name, aliased: Table[FilmCategoryRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[FilmCategoryRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.film_category</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.FilmCategory.FILM_CATEGORY)

  /**
   * Create an aliased <code>public.film_category</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.FilmCategory.FILM_CATEGORY)

  /**
   * Create a <code>public.film_category</code> table reference
   */
  def this() = this(DSL.name("film_category"), null)

  def this(path: Table[? <: Record], childPath: ForeignKey[? <: Record, FilmCategoryRecord], parentPath: InverseForeignKey[? <: Record, FilmCategoryRecord]) = this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, org.jooq.demo.skala.db.tables.FilmCategory.FILM_CATEGORY, null, null)

  override def getSchema: Schema = if (super.aliased()) null else Public.PUBLIC

  override def getPrimaryKey: UniqueKey[FilmCategoryRecord] = Keys.FILM_CATEGORY_PKEY

  override def getReferences: List[ ForeignKey[FilmCategoryRecord, ?] ] = Arrays.asList[ ForeignKey[FilmCategoryRecord, ?] ](Keys.FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY, Keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.category</code> table.
   */
  lazy val category: CategoryPath = { new CategoryPath(this, Keys.FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY, null) }

  /**
   * Get the implicit join path to the <code>public.film</code> table.
   */
  lazy val film: FilmPath = { new FilmPath(this, Keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, null) }
  override def as(alias: String): FilmCategory = new FilmCategory(DSL.name(alias), this)
  override def as(alias: Name): FilmCategory = new FilmCategory(alias, this)
  override def as(alias: Table[?]): FilmCategory = new FilmCategory(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): FilmCategory = new FilmCategory(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): FilmCategory = new FilmCategory(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[?]): FilmCategory = new FilmCategory(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): FilmCategory = new FilmCategory(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[? <: Condition]): FilmCategory = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): FilmCategory = where(DSL.and(conditions*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): FilmCategory = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): FilmCategory = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): FilmCategory = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): FilmCategory = where(DSL.condition(condition, binds*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[?]): FilmCategory = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[?]): FilmCategory = where(DSL.notExists(select))
}
