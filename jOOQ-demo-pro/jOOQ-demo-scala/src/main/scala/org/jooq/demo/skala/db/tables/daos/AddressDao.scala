/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.daos


import java.lang.Long
import java.lang.String
import java.time.LocalDateTime
import java.util.Collection
import java.util.List

import org.jooq.Configuration
import org.jooq.demo.skala.db.tables.Address
import org.jooq.demo.skala.db.tables.records.AddressRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
class AddressDao(configuration: Configuration) extends DAOImpl[AddressRecord, org.jooq.demo.skala.db.tables.pojos.Address, Long](Address.ADDRESS, classOf[org.jooq.demo.skala.db.tables.pojos.Address], configuration) {

  /**
   * Create a new AddressDao without any configuration
   */
  def this() = this(null)

  override def getId(o: org.jooq.demo.skala.db.tables.pojos.Address): Long = o.getAddressId
  override def insert(obj: org.jooq.demo.skala.db.tables.pojos.Address): Unit = super.insert(obj)
  override def insert(objs: org.jooq.demo.skala.db.tables.pojos.Address*): Unit = super.insert(objs*)
  override def insert(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Address]): Unit = super.insert(objs)
  override def update(obj: org.jooq.demo.skala.db.tables.pojos.Address): Unit = super.update(obj)
  override def update(objs: org.jooq.demo.skala.db.tables.pojos.Address*): Unit = super.update(objs*)
  override def update(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Address]): Unit = super.update(objs)
  override def merge(obj: org.jooq.demo.skala.db.tables.pojos.Address): Unit = super.merge(obj)
  override def merge(objs: org.jooq.demo.skala.db.tables.pojos.Address*): Unit = super.merge(objs*)
  override def merge(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Address]): Unit = super.merge(objs)
  override def delete(obj: org.jooq.demo.skala.db.tables.pojos.Address): Unit = super.delete(obj)
  override def delete(objs: org.jooq.demo.skala.db.tables.pojos.Address*): Unit = super.delete(objs*)
  override def delete(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Address]): Unit = super.delete(objs)
  override def deleteById(id: Long): Unit = super.deleteById(id)
  override def deleteById(ids: Long*): Unit = super.deleteById(ids*)
  override def deleteById(ids: Collection[Long]): Unit = super.deleteById(ids)

  /**
   * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfAddressId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.ADDRESS_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>address_id IN (values)</code>
   */
  def fetchByAddressId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.ADDRESS_ID, values*)

  /**
   * Fetch a unique record that has <code>address_id = value</code>
   */
  def fetchOneByAddressId(value: Long): org.jooq.demo.skala.db.tables.pojos.Address = fetchOne(Address.ADDRESS.ADDRESS_ID, value)

  /**
   * Fetch records that have <code>address BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfAddress(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.ADDRESS_, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>address IN (values)</code>
   */
  def fetchByAddress(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.ADDRESS_, values*)

  /**
   * Fetch records that have <code>address2 BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfAddress2(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.ADDRESS2, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>address2 IN (values)</code>
   */
  def fetchByAddress2(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.ADDRESS2, values*)

  /**
   * Fetch records that have <code>district BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfDistrict(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.DISTRICT, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>district IN (values)</code>
   */
  def fetchByDistrict(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.DISTRICT, values*)

  /**
   * Fetch records that have <code>city_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfCityId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.CITY_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>city_id IN (values)</code>
   */
  def fetchByCityId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.CITY_ID, values*)

  /**
   * Fetch records that have <code>postal_code BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfPostalCode(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.POSTAL_CODE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>postal_code IN (values)</code>
   */
  def fetchByPostalCode(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.POSTAL_CODE, values*)

  /**
   * Fetch records that have <code>phone BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfPhone(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.PHONE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>phone IN (values)</code>
   */
  def fetchByPhone(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.PHONE, values*)

  /**
   * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetchRange(Address.ADDRESS.LAST_UPDATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_update IN (values)</code>
   */
  def fetchByLastUpdate(values: LocalDateTime*): List[org.jooq.demo.skala.db.tables.pojos.Address] = fetch(Address.ADDRESS.LAST_UPDATE, values*)
}
