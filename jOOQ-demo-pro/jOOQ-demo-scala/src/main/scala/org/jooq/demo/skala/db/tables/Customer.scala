/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables


import java.lang.Boolean
import java.lang.Class
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.Arrays
import java.util.Collection
import java.util.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.Indexes
import org.jooq.demo.skala.db.Keys
import org.jooq.demo.skala.db.Public
import org.jooq.demo.skala.db.tables.Address.AddressPath
import org.jooq.demo.skala.db.tables.Payment.PaymentPath
import org.jooq.demo.skala.db.tables.PaymentP2007_01.PaymentP2007_01Path
import org.jooq.demo.skala.db.tables.PaymentP2007_02.PaymentP2007_02Path
import org.jooq.demo.skala.db.tables.PaymentP2007_03.PaymentP2007_03Path
import org.jooq.demo.skala.db.tables.PaymentP2007_04.PaymentP2007_04Path
import org.jooq.demo.skala.db.tables.PaymentP2007_05.PaymentP2007_05Path
import org.jooq.demo.skala.db.tables.PaymentP2007_06.PaymentP2007_06Path
import org.jooq.demo.skala.db.tables.Rental.RentalPath
import org.jooq.demo.skala.db.tables.Store.StorePath
import org.jooq.demo.skala.db.tables.records.CustomerRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import scala.Array


object Customer {

  /**
   * The reference instance of <code>public.customer</code>
   */
  val CUSTOMER = new Customer

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  class CustomerPath(path: Table[? <: Record], childPath: ForeignKey[? <: Record, CustomerRecord], parentPath: InverseForeignKey[? <: Record, CustomerRecord]) extends Customer(path, childPath, parentPath) with Path[CustomerRecord]
}

/**
 * This class is generated by jOOQ.
 */
class Customer(
  alias: Name,
  path: Table[? <: Record],
  childPath: ForeignKey[? <: Record, CustomerRecord],
  parentPath: InverseForeignKey[? <: Record, CustomerRecord],
  aliased: Table[CustomerRecord],
  parameters: Array[ Field[?] ],
  where: Condition
)
extends TableImpl[CustomerRecord](
  alias,
  Public.PUBLIC,
  path,
  childPath,
  parentPath,
  aliased,
  parameters,
  DSL.comment(""),
  TableOptions.table,
  where
) {

  /**
   * The class holding records for this type
   */
  override def getRecordType: Class[CustomerRecord] = classOf[CustomerRecord]

  /**
   * The column <code>public.customer.customer_id</code>.
   */
  val CUSTOMER_ID: TableField[CustomerRecord, Long] = createField(DSL.name("customer_id"), SQLDataType.BIGINT.nullable(false).identity(true), "")

  /**
   * The column <code>public.customer.store_id</code>.
   */
  val STORE_ID: TableField[CustomerRecord, Long] = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.customer.first_name</code>.
   */
  val FIRST_NAME: TableField[CustomerRecord, String] = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.customer.last_name</code>.
   */
  val LAST_NAME: TableField[CustomerRecord, String] = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), "")

  /**
   * The column <code>public.customer.email</code>.
   */
  val EMAIL: TableField[CustomerRecord, String] = createField(DSL.name("email"), SQLDataType.VARCHAR(50), "")

  /**
   * The column <code>public.customer.address_id</code>.
   */
  val ADDRESS_ID: TableField[CustomerRecord, Long] = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), "")

  /**
   * The column <code>public.customer.activebool</code>.
   */
  val ACTIVEBOOL: TableField[CustomerRecord, Boolean] = createField(DSL.name("activebool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), "")

  /**
   * The column <code>public.customer.create_date</code>.
   */
  val CREATE_DATE: TableField[CustomerRecord, LocalDate] = createField(DSL.name("create_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("('now'::text)::date"), SQLDataType.LOCALDATE)), "")

  /**
   * The column <code>public.customer.last_update</code>.
   */
  val LAST_UPDATE: TableField[CustomerRecord, LocalDateTime] = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).readonly(true).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), "")

  /**
   * The column <code>public.customer.active</code>.
   */
  val ACTIVE: TableField[CustomerRecord, Integer] = createField(DSL.name("active"), SQLDataType.INTEGER, "")

  private def this(alias: Name, aliased: Table[CustomerRecord]) = this(alias, null, null, null, aliased, null, null)
  private def this(alias: Name, aliased: Table[CustomerRecord], where: Condition) = this(alias, null, null, null, aliased, null, where)

  /**
   * Create an aliased <code>public.customer</code> table reference
   */
  def this(alias: String) = this(DSL.name(alias), org.jooq.demo.skala.db.tables.Customer.CUSTOMER)

  /**
   * Create an aliased <code>public.customer</code> table reference
   */
  def this(alias: Name) = this(alias, org.jooq.demo.skala.db.tables.Customer.CUSTOMER)

  /**
   * Create a <code>public.customer</code> table reference
   */
  def this() = this(DSL.name("customer"), null)

  def this(path: Table[? <: Record], childPath: ForeignKey[? <: Record, CustomerRecord], parentPath: InverseForeignKey[? <: Record, CustomerRecord]) = this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, org.jooq.demo.skala.db.tables.Customer.CUSTOMER, null, null)

  override def getSchema: Schema = if (super.aliased()) null else Public.PUBLIC

  override def getIndexes: List[Index] = Arrays.asList[ Index ](Indexes.IDX_FK_ADDRESS_ID, Indexes.IDX_FK_STORE_ID, Indexes.IDX_LAST_NAME)

  override def getIdentity: Identity[CustomerRecord, Long] = super.getIdentity.asInstanceOf[ Identity[CustomerRecord, Long] ]

  override def getPrimaryKey: UniqueKey[CustomerRecord] = Keys.CUSTOMER_PKEY

  override def getReferences: List[ ForeignKey[CustomerRecord, ?] ] = Arrays.asList[ ForeignKey[CustomerRecord, ?] ](Keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY, Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY)

  /**
   * Get the implicit join path to the <code>public.address</code> table.
   */
  lazy val address: AddressPath = { new AddressPath(this, Keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY, null) }

  /**
   * Get the implicit join path to the <code>public.store</code> table.
   */
  lazy val store: StorePath = { new StorePath(this, Keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY, null) }

  /**
   * Get the implicit to-many join path to the <code>public.payment</code> table
   */
  lazy val payment: PaymentPath = { new PaymentPath(this, null, Keys.PAYMENT__PAYMENT_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the
   * <code>public.payment_p2007_01</code> table
   */
  lazy val paymentP2007_01: PaymentP2007_01Path = { new PaymentP2007_01Path(this, null, Keys.PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the
   * <code>public.payment_p2007_02</code> table
   */
  lazy val paymentP2007_02: PaymentP2007_02Path = { new PaymentP2007_02Path(this, null, Keys.PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the
   * <code>public.payment_p2007_03</code> table
   */
  lazy val paymentP2007_03: PaymentP2007_03Path = { new PaymentP2007_03Path(this, null, Keys.PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the
   * <code>public.payment_p2007_04</code> table
   */
  lazy val paymentP2007_04: PaymentP2007_04Path = { new PaymentP2007_04Path(this, null, Keys.PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the
   * <code>public.payment_p2007_05</code> table
   */
  lazy val paymentP2007_05: PaymentP2007_05Path = { new PaymentP2007_05Path(this, null, Keys.PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the
   * <code>public.payment_p2007_06</code> table
   */
  lazy val paymentP2007_06: PaymentP2007_06Path = { new PaymentP2007_06Path(this, null, Keys.PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY.getInverseKey()) }

  /**
   * Get the implicit to-many join path to the <code>public.rental</code> table
   */
  lazy val rental: RentalPath = { new RentalPath(this, null, Keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY.getInverseKey()) }
  override def as(alias: String): Customer = new Customer(DSL.name(alias), this)
  override def as(alias: Name): Customer = new Customer(alias, this)
  override def as(alias: Table[?]): Customer = new Customer(alias.getQualifiedName(), this)

  /**
   * Rename this table
   */
  override def rename(name: String): Customer = new Customer(DSL.name(name), null)

  /**
   * Rename this table
   */
  override def rename(name: Name): Customer = new Customer(name, null)

  /**
   * Rename this table
   */
  override def rename(name: Table[?]): Customer = new Customer(name.getQualifiedName(), null)

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Condition): Customer = new Customer(getQualifiedName(), if (super.aliased()) this else null, condition)

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Collection[? <: Condition]): Customer = where(DSL.and(conditions))

  /**
   * Create an inline derived table from this table
   */
  override def where(conditions: Condition*): Customer = where(DSL.and(conditions*))

  /**
   * Create an inline derived table from this table
   */
  override def where(condition: Field[Boolean]): Customer = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(condition: SQL): Customer = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String): Customer = where(DSL.condition(condition))

  /**
   * Create an inline derived table from this table
   */
  @PlainSQL override def where(@Stringly.SQL condition: String, binds: AnyRef*): Customer = where(DSL.condition(condition, binds*))

  /**
   * Create an inline derived table from this table
   */
  override def whereExists(select: Select[?]): Customer = where(DSL.exists(select))

  /**
   * Create an inline derived table from this table
   */
  override def whereNotExists(select: Select[?]): Customer = where(DSL.notExists(select))
}
