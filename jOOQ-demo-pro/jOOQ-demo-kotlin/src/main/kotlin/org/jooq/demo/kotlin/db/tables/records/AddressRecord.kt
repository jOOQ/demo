/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.demo.kotlin.db.tables.Address
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class AddressRecord() : UpdatableRecordImpl<AddressRecord>(Address.ADDRESS) {

    open var addressId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var address: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var address2: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var district: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var cityId: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    open var postalCode: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var phone: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(addressId: Long? = null, address: String? = null, address2: String? = null, district: String? = null, cityId: Long? = null, postalCode: String? = null, phone: String? = null, lastUpdate: LocalDateTime? = null): this() {
        this.addressId = addressId
        this.address = address
        this.address2 = address2
        this.district = district
        this.cityId = cityId
        this.postalCode = postalCode
        this.phone = phone
        this.lastUpdate = lastUpdate
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(addressId: Long? = null, address: String? = null, address2: String? = null, district: String? = null, cityId: Long? = null, postalCode: String? = null, phone: String? = null): this() {
        this.addressId = addressId
        this.address = address
        this.address2 = address2
        this.district = district
        this.cityId = cityId
        this.postalCode = postalCode
        this.phone = phone
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.Address?): this() {
        if (value != null) {
            this.addressId = value.addressId
            this.address = value.address
            this.address2 = value.address2
            this.district = value.district
            this.cityId = value.cityId
            this.postalCode = value.postalCode
            this.phone = value.phone
            this.lastUpdate = value.lastUpdate
            resetTouchedOnNotNull()
        }
    }
}
