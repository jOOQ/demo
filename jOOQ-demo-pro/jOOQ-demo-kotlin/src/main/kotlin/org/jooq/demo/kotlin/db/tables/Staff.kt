/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_01__PAYMENT_P2007_01_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_02__PAYMENT_P2007_02_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_03__PAYMENT_P2007_03_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_04__PAYMENT_P2007_04_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_05__PAYMENT_P2007_05_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.PAYMENT__PAYMENT_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.RENTAL__RENTAL_STAFF_ID_FKEY
import org.jooq.demo.kotlin.db.keys.STAFF_PKEY
import org.jooq.demo.kotlin.db.keys.STAFF__STAFF_ADDRESS_ID_FKEY
import org.jooq.demo.kotlin.db.keys.STAFF__STAFF_STORE_ID_FKEY
import org.jooq.demo.kotlin.db.tables.Address.AddressPath
import org.jooq.demo.kotlin.db.tables.Payment.PaymentPath
import org.jooq.demo.kotlin.db.tables.PaymentP2007_01.PaymentP2007_01Path
import org.jooq.demo.kotlin.db.tables.PaymentP2007_02.PaymentP2007_02Path
import org.jooq.demo.kotlin.db.tables.PaymentP2007_03.PaymentP2007_03Path
import org.jooq.demo.kotlin.db.tables.PaymentP2007_04.PaymentP2007_04Path
import org.jooq.demo.kotlin.db.tables.PaymentP2007_05.PaymentP2007_05Path
import org.jooq.demo.kotlin.db.tables.PaymentP2007_06.PaymentP2007_06Path
import org.jooq.demo.kotlin.db.tables.Rental.RentalPath
import org.jooq.demo.kotlin.db.tables.Store.StorePath
import org.jooq.demo.kotlin.db.tables.records.StaffRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Staff(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, StaffRecord>?,
    parentPath: InverseForeignKey<out Record, StaffRecord>?,
    aliased: Table<StaffRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<StaffRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.staff</code>
         */
        val STAFF: Staff = Staff()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StaffRecord> = StaffRecord::class.java

    /**
     * The column <code>public.staff.staff_id</code>.
     */
    val STAFF_ID: TableField<StaffRecord, Long?> = createField(DSL.name("staff_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.staff.first_name</code>.
     */
    val FIRST_NAME: TableField<StaffRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.staff.last_name</code>.
     */
    val LAST_NAME: TableField<StaffRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.staff.address_id</code>.
     */
    val ADDRESS_ID: TableField<StaffRecord, Long?> = createField(DSL.name("address_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.staff.email</code>.
     */
    val EMAIL: TableField<StaffRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.staff.store_id</code>.
     */
    val STORE_ID: TableField<StaffRecord, Long?> = createField(DSL.name("store_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.staff.active</code>.
     */
    val ACTIVE: TableField<StaffRecord, Boolean?> = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.staff.username</code>.
     */
    val USERNAME: TableField<StaffRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(16).nullable(false), this, "")

    /**
     * The column <code>public.staff.password</code>.
     */
    val PASSWORD: TableField<StaffRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(40), this, "")

    /**
     * The column <code>public.staff.last_update</code>.
     */
    val LAST_UPDATE: TableField<StaffRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).readonly(true).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.staff.picture</code>.
     */
    val PICTURE: TableField<StaffRecord, ByteArray?> = createField(DSL.name("picture"), SQLDataType.BLOB, this, "")

    /**
     * The column <code>public.staff.full_address</code>.
     */
    val FULL_ADDRESS: TableField<StaffRecord, String?> = createField(DSL.name("full_address"), SQLDataType.CLOB.virtual(), this, "", { ctx -> DSL.concat(address.ADDRESS_, DSL.inline(", "), address.POSTAL_CODE, DSL.inline(", "), address.city.CITY_, DSL.inline(", "), address.city.country.COUNTRY_) })

    /**
     * The column <code>public.staff.full_name</code>.
     */
    val FULL_NAME: TableField<StaffRecord, String?> = createField(DSL.name("full_name"), SQLDataType.CLOB.virtual(), this, "", { ctx -> DSL.concat(FIRST_NAME, DSL.inline(" "), LAST_NAME) })

    private constructor(alias: Name, aliased: Table<StaffRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<StaffRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<StaffRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.staff</code> table reference
     */
    constructor(): this(DSL.name("staff"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StaffRecord>?, parentPath: InverseForeignKey<out Record, StaffRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, STAFF, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class StaffPath : Staff, Path<StaffRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StaffRecord>?, parentPath: InverseForeignKey<out Record, StaffRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<StaffRecord>): super(alias, aliased)
        override fun `as`(alias: String): StaffPath = StaffPath(DSL.name(alias), this)
        override fun `as`(alias: Name): StaffPath = StaffPath(alias, this)
        override fun `as`(alias: Table<*>): StaffPath = StaffPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<StaffRecord, Long?> = super.getIdentity() as Identity<StaffRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<StaffRecord> = STAFF_PKEY
    override fun getReferences(): List<ForeignKey<StaffRecord, *>> = listOf(STAFF__STAFF_ADDRESS_ID_FKEY, STAFF__STAFF_STORE_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    fun address(): AddressPath = address
    val address: AddressPath by lazy { AddressPath(this, STAFF__STAFF_ADDRESS_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.store</code> table.
     */
    fun store(): StorePath = store
    val store: StorePath by lazy { StorePath(this, STAFF__STAFF_STORE_ID_FKEY, null) }

    private lateinit var _paymentP2007_01: PaymentP2007_01Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2007_01</code> table
     */
    fun paymentP2007_01(): PaymentP2007_01Path {
        if (!this::_paymentP2007_01.isInitialized)
            _paymentP2007_01 = PaymentP2007_01Path(this, null, PAYMENT_P2007_01__PAYMENT_P2007_01_STAFF_ID_FKEY.inverseKey)

        return _paymentP2007_01;
    }

    val paymentP2007_01: PaymentP2007_01Path
        get(): PaymentP2007_01Path = paymentP2007_01()

    private lateinit var _paymentP2007_02: PaymentP2007_02Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2007_02</code> table
     */
    fun paymentP2007_02(): PaymentP2007_02Path {
        if (!this::_paymentP2007_02.isInitialized)
            _paymentP2007_02 = PaymentP2007_02Path(this, null, PAYMENT_P2007_02__PAYMENT_P2007_02_STAFF_ID_FKEY.inverseKey)

        return _paymentP2007_02;
    }

    val paymentP2007_02: PaymentP2007_02Path
        get(): PaymentP2007_02Path = paymentP2007_02()

    private lateinit var _paymentP2007_03: PaymentP2007_03Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2007_03</code> table
     */
    fun paymentP2007_03(): PaymentP2007_03Path {
        if (!this::_paymentP2007_03.isInitialized)
            _paymentP2007_03 = PaymentP2007_03Path(this, null, PAYMENT_P2007_03__PAYMENT_P2007_03_STAFF_ID_FKEY.inverseKey)

        return _paymentP2007_03;
    }

    val paymentP2007_03: PaymentP2007_03Path
        get(): PaymentP2007_03Path = paymentP2007_03()

    private lateinit var _paymentP2007_04: PaymentP2007_04Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2007_04</code> table
     */
    fun paymentP2007_04(): PaymentP2007_04Path {
        if (!this::_paymentP2007_04.isInitialized)
            _paymentP2007_04 = PaymentP2007_04Path(this, null, PAYMENT_P2007_04__PAYMENT_P2007_04_STAFF_ID_FKEY.inverseKey)

        return _paymentP2007_04;
    }

    val paymentP2007_04: PaymentP2007_04Path
        get(): PaymentP2007_04Path = paymentP2007_04()

    private lateinit var _paymentP2007_05: PaymentP2007_05Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2007_05</code> table
     */
    fun paymentP2007_05(): PaymentP2007_05Path {
        if (!this::_paymentP2007_05.isInitialized)
            _paymentP2007_05 = PaymentP2007_05Path(this, null, PAYMENT_P2007_05__PAYMENT_P2007_05_STAFF_ID_FKEY.inverseKey)

        return _paymentP2007_05;
    }

    val paymentP2007_05: PaymentP2007_05Path
        get(): PaymentP2007_05Path = paymentP2007_05()

    private lateinit var _paymentP2007_06: PaymentP2007_06Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2007_06</code> table
     */
    fun paymentP2007_06(): PaymentP2007_06Path {
        if (!this::_paymentP2007_06.isInitialized)
            _paymentP2007_06 = PaymentP2007_06Path(this, null, PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY.inverseKey)

        return _paymentP2007_06;
    }

    val paymentP2007_06: PaymentP2007_06Path
        get(): PaymentP2007_06Path = paymentP2007_06()

    private lateinit var _payment: PaymentPath

    /**
     * Get the implicit to-many join path to the <code>public.payment</code>
     * table
     */
    fun payment(): PaymentPath {
        if (!this::_payment.isInitialized)
            _payment = PaymentPath(this, null, PAYMENT__PAYMENT_STAFF_ID_FKEY.inverseKey)

        return _payment;
    }

    val payment: PaymentPath
        get(): PaymentPath = payment()

    private lateinit var _rental: RentalPath

    /**
     * Get the implicit to-many join path to the <code>public.rental</code>
     * table
     */
    fun rental(): RentalPath {
        if (!this::_rental.isInitialized)
            _rental = RentalPath(this, null, RENTAL__RENTAL_STAFF_ID_FKEY.inverseKey)

        return _rental;
    }

    val rental: RentalPath
        get(): RentalPath = rental()
    override fun `as`(alias: String): Staff = Staff(DSL.name(alias), this)
    override fun `as`(alias: Name): Staff = Staff(alias, this)
    override fun `as`(alias: Table<*>): Staff = Staff(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Staff = Staff(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Staff = Staff(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Staff = Staff(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Staff = Staff(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Staff = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Staff = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Staff = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Staff = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Staff = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Staff = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Staff = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Staff = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Staff = where(DSL.notExists(select))
}
