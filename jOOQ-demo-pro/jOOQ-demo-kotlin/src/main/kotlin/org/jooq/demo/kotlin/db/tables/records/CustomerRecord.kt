/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.records


import java.time.LocalDate
import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.demo.kotlin.db.tables.Customer
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class CustomerRecord() : UpdatableRecordImpl<CustomerRecord>(Customer.CUSTOMER) {

    open var customerId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var storeId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var firstName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var lastName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var email: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var addressId: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    open var activebool: Boolean?
        set(value): Unit = set(6, value)
        get(): Boolean? = get(6) as Boolean?

    open var createDate: LocalDate?
        set(value): Unit = set(7, value)
        get(): LocalDate? = get(7) as LocalDate?

    open var lastUpdate: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    open var active: Int?
        set(value): Unit = set(9, value)
        get(): Int? = get(9) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(customerId: Long? = null, storeId: Long? = null, firstName: String? = null, lastName: String? = null, email: String? = null, addressId: Long? = null, activebool: Boolean? = null, createDate: LocalDate? = null, lastUpdate: LocalDateTime? = null, active: Int? = null): this() {
        this.customerId = customerId
        this.storeId = storeId
        this.firstName = firstName
        this.lastName = lastName
        this.email = email
        this.addressId = addressId
        this.activebool = activebool
        this.createDate = createDate
        this.lastUpdate = lastUpdate
        this.active = active
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(customerId: Long? = null, storeId: Long? = null, firstName: String? = null, lastName: String? = null, email: String? = null, addressId: Long? = null, activebool: Boolean? = null, createDate: LocalDate? = null, active: Int? = null): this() {
        this.customerId = customerId
        this.storeId = storeId
        this.firstName = firstName
        this.lastName = lastName
        this.email = email
        this.addressId = addressId
        this.activebool = activebool
        this.createDate = createDate
        this.active = active
        resetTouchedOnNotNull()
    }

    /**
     * Create a detached, initialised CustomerRecord
     */
    constructor(value: org.jooq.demo.kotlin.db.tables.pojos.Customer?): this() {
        if (value != null) {
            this.customerId = value.customerId
            this.storeId = value.storeId
            this.firstName = value.firstName
            this.lastName = value.lastName
            this.email = value.email
            this.addressId = value.addressId
            this.activebool = value.activebool
            this.createDate = value.createDate
            this.lastUpdate = value.lastUpdate
            this.active = value.active
            resetTouchedOnNotNull()
        }
    }
}
