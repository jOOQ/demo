/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.Record2
import org.jooq.demo.kotlin.db.tables.FilmCategory
import org.jooq.demo.kotlin.db.tables.records.FilmCategoryRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class FilmCategoryDao(configuration: Configuration?) : DAOImpl<FilmCategoryRecord, org.jooq.demo.kotlin.db.tables.pojos.FilmCategory, Record2<Long?, Long?>>(FilmCategory.FILM_CATEGORY, org.jooq.demo.kotlin.db.tables.pojos.FilmCategory::class.java, configuration) {

    /**
     * Create a new FilmCategoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.demo.kotlin.db.tables.pojos.FilmCategory): Record2<Long?, Long?> = compositeKeyRecord(o.filmId, o.categoryId)

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFilmId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.FilmCategory> = fetchRange(FilmCategory.FILM_CATEGORY.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByFilmId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.FilmCategory> = fetch(FilmCategory.FILM_CATEGORY.FILM_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCategoryId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.FilmCategory> = fetchRange(FilmCategory.FILM_CATEGORY.CATEGORY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    fun fetchByCategoryId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.FilmCategory> = fetch(FilmCategory.FILM_CATEGORY.CATEGORY_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.demo.kotlin.db.tables.pojos.FilmCategory> = fetchRange(FilmCategory.FILM_CATEGORY.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.demo.kotlin.db.tables.pojos.FilmCategory> = fetch(FilmCategory.FILM_CATEGORY.LAST_UPDATE, *values)
}
