/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.demo.kotlin.db.Public
import org.jooq.demo.kotlin.db.keys.FILM_CATEGORY_PKEY
import org.jooq.demo.kotlin.db.keys.FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY
import org.jooq.demo.kotlin.db.keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY
import org.jooq.demo.kotlin.db.tables.Category.CategoryPath
import org.jooq.demo.kotlin.db.tables.Film.FilmPath
import org.jooq.demo.kotlin.db.tables.records.FilmCategoryRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class FilmCategory(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, FilmCategoryRecord>?,
    parentPath: InverseForeignKey<out Record, FilmCategoryRecord>?,
    aliased: Table<FilmCategoryRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<FilmCategoryRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.film_category</code>
         */
        val FILM_CATEGORY: FilmCategory = FilmCategory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmCategoryRecord> = FilmCategoryRecord::class.java

    /**
     * The column <code>public.film_category.film_id</code>.
     */
    val FILM_ID: TableField<FilmCategoryRecord, Long?> = createField(DSL.name("film_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.film_category.category_id</code>.
     */
    val CATEGORY_ID: TableField<FilmCategoryRecord, Long?> = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.film_category.last_update</code>.
     */
    val LAST_UPDATE: TableField<FilmCategoryRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).readonly(true).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<FilmCategoryRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<FilmCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<FilmCategoryRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.film_category</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.film_category</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.film_category</code> table reference
     */
    constructor(): this(DSL.name("film_category"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, FilmCategoryRecord>?, parentPath: InverseForeignKey<out Record, FilmCategoryRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, FILM_CATEGORY, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class FilmCategoryPath : FilmCategory, Path<FilmCategoryRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, FilmCategoryRecord>?, parentPath: InverseForeignKey<out Record, FilmCategoryRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<FilmCategoryRecord>): super(alias, aliased)
        override fun `as`(alias: String): FilmCategoryPath = FilmCategoryPath(DSL.name(alias), this)
        override fun `as`(alias: Name): FilmCategoryPath = FilmCategoryPath(alias, this)
        override fun `as`(alias: Table<*>): FilmCategoryPath = FilmCategoryPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<FilmCategoryRecord> = FILM_CATEGORY_PKEY
    override fun getReferences(): List<ForeignKey<FilmCategoryRecord, *>> = listOf(FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY, FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    fun category(): CategoryPath = category
    val category: CategoryPath by lazy { CategoryPath(this, FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.film</code> table.
     */
    fun film(): FilmPath = film
    val film: FilmPath by lazy { FilmPath(this, FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, null) }
    override fun `as`(alias: String): FilmCategory = FilmCategory(DSL.name(alias), this)
    override fun `as`(alias: Name): FilmCategory = FilmCategory(alias, this)
    override fun `as`(alias: Table<*>): FilmCategory = FilmCategory(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): FilmCategory = FilmCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FilmCategory = FilmCategory(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): FilmCategory = FilmCategory(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): FilmCategory = FilmCategory(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): FilmCategory = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): FilmCategory = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): FilmCategory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): FilmCategory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): FilmCategory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): FilmCategory = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): FilmCategory = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): FilmCategory = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): FilmCategory = where(DSL.notExists(select))
}
