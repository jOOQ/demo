/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db


import org.jooq.ForeignKey
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.demo.skala.db.tables.Actor
import org.jooq.demo.skala.db.tables.Address
import org.jooq.demo.skala.db.tables.Category
import org.jooq.demo.skala.db.tables.City
import org.jooq.demo.skala.db.tables.Country
import org.jooq.demo.skala.db.tables.Customer
import org.jooq.demo.skala.db.tables.Film
import org.jooq.demo.skala.db.tables.FilmActor
import org.jooq.demo.skala.db.tables.FilmCategory
import org.jooq.demo.skala.db.tables.Inventory
import org.jooq.demo.skala.db.tables.Language
import org.jooq.demo.skala.db.tables.Payment
import org.jooq.demo.skala.db.tables.PaymentP2007_01
import org.jooq.demo.skala.db.tables.PaymentP2007_02
import org.jooq.demo.skala.db.tables.PaymentP2007_03
import org.jooq.demo.skala.db.tables.PaymentP2007_04
import org.jooq.demo.skala.db.tables.PaymentP2007_05
import org.jooq.demo.skala.db.tables.PaymentP2007_06
import org.jooq.demo.skala.db.tables.Rental
import org.jooq.demo.skala.db.tables.Staff
import org.jooq.demo.skala.db.tables.Store
import org.jooq.demo.skala.db.tables.records.ActorRecord
import org.jooq.demo.skala.db.tables.records.AddressRecord
import org.jooq.demo.skala.db.tables.records.CategoryRecord
import org.jooq.demo.skala.db.tables.records.CityRecord
import org.jooq.demo.skala.db.tables.records.CountryRecord
import org.jooq.demo.skala.db.tables.records.CustomerRecord
import org.jooq.demo.skala.db.tables.records.FilmActorRecord
import org.jooq.demo.skala.db.tables.records.FilmCategoryRecord
import org.jooq.demo.skala.db.tables.records.FilmRecord
import org.jooq.demo.skala.db.tables.records.InventoryRecord
import org.jooq.demo.skala.db.tables.records.LanguageRecord
import org.jooq.demo.skala.db.tables.records.PaymentP2007_01Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_02Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_03Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_04Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_05Record
import org.jooq.demo.skala.db.tables.records.PaymentP2007_06Record
import org.jooq.demo.skala.db.tables.records.PaymentRecord
import org.jooq.demo.skala.db.tables.records.RentalRecord
import org.jooq.demo.skala.db.tables.records.StaffRecord
import org.jooq.demo.skala.db.tables.records.StoreRecord
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
object Keys {

  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  val ACTOR_PKEY: UniqueKey[ActorRecord] = Internal.createUniqueKey(Actor.ACTOR, DSL.name("actor_pkey"), Array(Actor.ACTOR.ACTOR_ID).asInstanceOf[Array[TableField[ActorRecord, ?] ] ], true)
  val ADDRESS_PKEY: UniqueKey[AddressRecord] = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), Array(Address.ADDRESS.ADDRESS_ID).asInstanceOf[Array[TableField[AddressRecord, ?] ] ], true)
  val CATEGORY_PKEY: UniqueKey[CategoryRecord] = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), Array(Category.CATEGORY.CATEGORY_ID).asInstanceOf[Array[TableField[CategoryRecord, ?] ] ], true)
  val CITY_PKEY: UniqueKey[CityRecord] = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), Array(City.CITY.CITY_ID).asInstanceOf[Array[TableField[CityRecord, ?] ] ], true)
  val COUNTRY_PKEY: UniqueKey[CountryRecord] = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), Array(Country.COUNTRY.COUNTRY_ID).asInstanceOf[Array[TableField[CountryRecord, ?] ] ], true)
  val CUSTOMER_PKEY: UniqueKey[CustomerRecord] = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true)
  val FILM_PKEY: UniqueKey[FilmRecord] = Internal.createUniqueKey(Film.FILM, DSL.name("film_pkey"), Array(Film.FILM.FILM_ID).asInstanceOf[Array[TableField[FilmRecord, ?] ] ], true)
  val FILM_ACTOR_PKEY: UniqueKey[FilmActorRecord] = Internal.createUniqueKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_pkey"), Array(FilmActor.FILM_ACTOR.ACTOR_ID, FilmActor.FILM_ACTOR.FILM_ID).asInstanceOf[Array[TableField[FilmActorRecord, ?] ] ], true)
  val FILM_CATEGORY_PKEY: UniqueKey[FilmCategoryRecord] = Internal.createUniqueKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_pkey"), Array(FilmCategory.FILM_CATEGORY.FILM_ID, FilmCategory.FILM_CATEGORY.CATEGORY_ID).asInstanceOf[Array[TableField[FilmCategoryRecord, ?] ] ], true)
  val INVENTORY_PKEY: UniqueKey[InventoryRecord] = Internal.createUniqueKey(Inventory.INVENTORY, DSL.name("inventory_pkey"), Array(Inventory.INVENTORY.INVENTORY_ID).asInstanceOf[Array[TableField[InventoryRecord, ?] ] ], true)
  val LANGUAGE_PKEY: UniqueKey[LanguageRecord] = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), Array(Language.LANGUAGE.LANGUAGE_ID).asInstanceOf[Array[TableField[LanguageRecord, ?] ] ], true)
  val PAYMENT_PKEY: UniqueKey[PaymentRecord] = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("payment_pkey"), Array(Payment.PAYMENT.PAYMENT_ID).asInstanceOf[Array[TableField[PaymentRecord, ?] ] ], true)
  val RENTAL_PKEY: UniqueKey[RentalRecord] = Internal.createUniqueKey(Rental.RENTAL, DSL.name("rental_pkey"), Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true)
  val STAFF_PKEY: UniqueKey[StaffRecord] = Internal.createUniqueKey(Staff.STAFF, DSL.name("staff_pkey"), Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true)
  val STORE_PKEY: UniqueKey[StoreRecord] = Internal.createUniqueKey(Store.STORE, DSL.name("store_pkey"), Array(Store.STORE.STORE_ID).asInstanceOf[Array[TableField[StoreRecord, ?] ] ], true)

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------

  val ADDRESS__ADDRESS_CITY_ID_FKEY: ForeignKey[AddressRecord, CityRecord] = Internal.createForeignKey(Address.ADDRESS, DSL.name("address_city_id_fkey"), Array(Address.ADDRESS.CITY_ID).asInstanceOf[Array[TableField[AddressRecord, ?] ] ], Keys.CITY_PKEY, Array(City.CITY.CITY_ID).asInstanceOf[Array[TableField[CityRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val CITY__CITY_COUNTRY_ID_FKEY: ForeignKey[CityRecord, CountryRecord] = Internal.createForeignKey(City.CITY, DSL.name("city_country_id_fkey"), Array(City.CITY.COUNTRY_ID).asInstanceOf[Array[TableField[CityRecord, ?] ] ], Keys.COUNTRY_PKEY, Array(Country.COUNTRY.COUNTRY_ID).asInstanceOf[Array[TableField[CountryRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY: ForeignKey[CustomerRecord, AddressRecord] = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_address_id_fkey"), Array(Customer.CUSTOMER.ADDRESS_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], Keys.ADDRESS_PKEY, Array(Address.ADDRESS.ADDRESS_ID).asInstanceOf[Array[TableField[AddressRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val CUSTOMER__CUSTOMER_STORE_ID_FKEY: ForeignKey[CustomerRecord, StoreRecord] = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_store_id_fkey"), Array(Customer.CUSTOMER.STORE_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], Keys.STORE_PKEY, Array(Store.STORE.STORE_ID).asInstanceOf[Array[TableField[StoreRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val FILM__FILM_LANGUAGE_ID_FKEY: ForeignKey[FilmRecord, LanguageRecord] = Internal.createForeignKey(Film.FILM, DSL.name("film_language_id_fkey"), Array(Film.FILM.LANGUAGE_ID).asInstanceOf[Array[TableField[FilmRecord, ?] ] ], Keys.LANGUAGE_PKEY, Array(Language.LANGUAGE.LANGUAGE_ID).asInstanceOf[Array[TableField[LanguageRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY: ForeignKey[FilmRecord, LanguageRecord] = Internal.createForeignKey(Film.FILM, DSL.name("film_original_language_id_fkey"), Array(Film.FILM.ORIGINAL_LANGUAGE_ID).asInstanceOf[Array[TableField[FilmRecord, ?] ] ], Keys.LANGUAGE_PKEY, Array(Language.LANGUAGE.LANGUAGE_ID).asInstanceOf[Array[TableField[LanguageRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY: ForeignKey[FilmActorRecord, ActorRecord] = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_actor_id_fkey"), Array(FilmActor.FILM_ACTOR.ACTOR_ID).asInstanceOf[Array[TableField[FilmActorRecord, ?] ] ], Keys.ACTOR_PKEY, Array(Actor.ACTOR.ACTOR_ID).asInstanceOf[Array[TableField[ActorRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY: ForeignKey[FilmActorRecord, FilmRecord] = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_film_id_fkey"), Array(FilmActor.FILM_ACTOR.FILM_ID).asInstanceOf[Array[TableField[FilmActorRecord, ?] ] ], Keys.FILM_PKEY, Array(Film.FILM.FILM_ID).asInstanceOf[Array[TableField[FilmRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY: ForeignKey[FilmCategoryRecord, CategoryRecord] = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_category_id_fkey"), Array(FilmCategory.FILM_CATEGORY.CATEGORY_ID).asInstanceOf[Array[TableField[FilmCategoryRecord, ?] ] ], Keys.CATEGORY_PKEY, Array(Category.CATEGORY.CATEGORY_ID).asInstanceOf[Array[TableField[CategoryRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY: ForeignKey[FilmCategoryRecord, FilmRecord] = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_film_id_fkey"), Array(FilmCategory.FILM_CATEGORY.FILM_ID).asInstanceOf[Array[TableField[FilmCategoryRecord, ?] ] ], Keys.FILM_PKEY, Array(Film.FILM.FILM_ID).asInstanceOf[Array[TableField[FilmRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val INVENTORY__INVENTORY_FILM_ID_FKEY: ForeignKey[InventoryRecord, FilmRecord] = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("inventory_film_id_fkey"), Array(Inventory.INVENTORY.FILM_ID).asInstanceOf[Array[TableField[InventoryRecord, ?] ] ], Keys.FILM_PKEY, Array(Film.FILM.FILM_ID).asInstanceOf[Array[TableField[FilmRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val INVENTORY__INVENTORY_STORE_ID_FKEY: ForeignKey[InventoryRecord, StoreRecord] = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("inventory_store_id_fkey"), Array(Inventory.INVENTORY.STORE_ID).asInstanceOf[Array[TableField[InventoryRecord, ?] ] ], Keys.STORE_PKEY, Array(Store.STORE.STORE_ID).asInstanceOf[Array[TableField[StoreRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val PAYMENT__PAYMENT_CUSTOMER_ID_FKEY: ForeignKey[PaymentRecord, CustomerRecord] = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_customer_id_fkey"), Array(Payment.PAYMENT.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentRecord, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val PAYMENT__PAYMENT_RENTAL_ID_FKEY: ForeignKey[PaymentRecord, RentalRecord] = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_rental_id_fkey"), Array(Payment.PAYMENT.RENTAL_ID).asInstanceOf[Array[TableField[PaymentRecord, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.SET_NULL, ForeignKeyRule.CASCADE)
  val PAYMENT__PAYMENT_STAFF_ID_FKEY: ForeignKey[PaymentRecord, StaffRecord] = Internal.createForeignKey(Payment.PAYMENT, DSL.name("payment_staff_id_fkey"), Array(Payment.PAYMENT.STAFF_ID).asInstanceOf[Array[TableField[PaymentRecord, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val PAYMENT_P2007_01__PAYMENT_P2007_01_CUSTOMER_ID_FKEY: ForeignKey[PaymentP2007_01Record, CustomerRecord] = Internal.createForeignKey(PaymentP2007_01.PAYMENT_P2007_01, DSL.name("payment_p2007_01_customer_id_fkey"), Array(PaymentP2007_01.PAYMENT_P2007_01.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentP2007_01Record, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_01__PAYMENT_P2007_01_RENTAL_ID_FKEY: ForeignKey[PaymentP2007_01Record, RentalRecord] = Internal.createForeignKey(PaymentP2007_01.PAYMENT_P2007_01, DSL.name("payment_p2007_01_rental_id_fkey"), Array(PaymentP2007_01.PAYMENT_P2007_01.RENTAL_ID).asInstanceOf[Array[TableField[PaymentP2007_01Record, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_01__PAYMENT_P2007_01_STAFF_ID_FKEY: ForeignKey[PaymentP2007_01Record, StaffRecord] = Internal.createForeignKey(PaymentP2007_01.PAYMENT_P2007_01, DSL.name("payment_p2007_01_staff_id_fkey"), Array(PaymentP2007_01.PAYMENT_P2007_01.STAFF_ID).asInstanceOf[Array[TableField[PaymentP2007_01Record, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_02__PAYMENT_P2007_02_CUSTOMER_ID_FKEY: ForeignKey[PaymentP2007_02Record, CustomerRecord] = Internal.createForeignKey(PaymentP2007_02.PAYMENT_P2007_02, DSL.name("payment_p2007_02_customer_id_fkey"), Array(PaymentP2007_02.PAYMENT_P2007_02.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentP2007_02Record, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_02__PAYMENT_P2007_02_RENTAL_ID_FKEY: ForeignKey[PaymentP2007_02Record, RentalRecord] = Internal.createForeignKey(PaymentP2007_02.PAYMENT_P2007_02, DSL.name("payment_p2007_02_rental_id_fkey"), Array(PaymentP2007_02.PAYMENT_P2007_02.RENTAL_ID).asInstanceOf[Array[TableField[PaymentP2007_02Record, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_02__PAYMENT_P2007_02_STAFF_ID_FKEY: ForeignKey[PaymentP2007_02Record, StaffRecord] = Internal.createForeignKey(PaymentP2007_02.PAYMENT_P2007_02, DSL.name("payment_p2007_02_staff_id_fkey"), Array(PaymentP2007_02.PAYMENT_P2007_02.STAFF_ID).asInstanceOf[Array[TableField[PaymentP2007_02Record, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_03__PAYMENT_P2007_03_CUSTOMER_ID_FKEY: ForeignKey[PaymentP2007_03Record, CustomerRecord] = Internal.createForeignKey(PaymentP2007_03.PAYMENT_P2007_03, DSL.name("payment_p2007_03_customer_id_fkey"), Array(PaymentP2007_03.PAYMENT_P2007_03.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentP2007_03Record, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_03__PAYMENT_P2007_03_RENTAL_ID_FKEY: ForeignKey[PaymentP2007_03Record, RentalRecord] = Internal.createForeignKey(PaymentP2007_03.PAYMENT_P2007_03, DSL.name("payment_p2007_03_rental_id_fkey"), Array(PaymentP2007_03.PAYMENT_P2007_03.RENTAL_ID).asInstanceOf[Array[TableField[PaymentP2007_03Record, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_03__PAYMENT_P2007_03_STAFF_ID_FKEY: ForeignKey[PaymentP2007_03Record, StaffRecord] = Internal.createForeignKey(PaymentP2007_03.PAYMENT_P2007_03, DSL.name("payment_p2007_03_staff_id_fkey"), Array(PaymentP2007_03.PAYMENT_P2007_03.STAFF_ID).asInstanceOf[Array[TableField[PaymentP2007_03Record, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_04__PAYMENT_P2007_04_CUSTOMER_ID_FKEY: ForeignKey[PaymentP2007_04Record, CustomerRecord] = Internal.createForeignKey(PaymentP2007_04.PAYMENT_P2007_04, DSL.name("payment_p2007_04_customer_id_fkey"), Array(PaymentP2007_04.PAYMENT_P2007_04.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentP2007_04Record, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_04__PAYMENT_P2007_04_RENTAL_ID_FKEY: ForeignKey[PaymentP2007_04Record, RentalRecord] = Internal.createForeignKey(PaymentP2007_04.PAYMENT_P2007_04, DSL.name("payment_p2007_04_rental_id_fkey"), Array(PaymentP2007_04.PAYMENT_P2007_04.RENTAL_ID).asInstanceOf[Array[TableField[PaymentP2007_04Record, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_04__PAYMENT_P2007_04_STAFF_ID_FKEY: ForeignKey[PaymentP2007_04Record, StaffRecord] = Internal.createForeignKey(PaymentP2007_04.PAYMENT_P2007_04, DSL.name("payment_p2007_04_staff_id_fkey"), Array(PaymentP2007_04.PAYMENT_P2007_04.STAFF_ID).asInstanceOf[Array[TableField[PaymentP2007_04Record, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_05__PAYMENT_P2007_05_CUSTOMER_ID_FKEY: ForeignKey[PaymentP2007_05Record, CustomerRecord] = Internal.createForeignKey(PaymentP2007_05.PAYMENT_P2007_05, DSL.name("payment_p2007_05_customer_id_fkey"), Array(PaymentP2007_05.PAYMENT_P2007_05.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentP2007_05Record, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_05__PAYMENT_P2007_05_RENTAL_ID_FKEY: ForeignKey[PaymentP2007_05Record, RentalRecord] = Internal.createForeignKey(PaymentP2007_05.PAYMENT_P2007_05, DSL.name("payment_p2007_05_rental_id_fkey"), Array(PaymentP2007_05.PAYMENT_P2007_05.RENTAL_ID).asInstanceOf[Array[TableField[PaymentP2007_05Record, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_05__PAYMENT_P2007_05_STAFF_ID_FKEY: ForeignKey[PaymentP2007_05Record, StaffRecord] = Internal.createForeignKey(PaymentP2007_05.PAYMENT_P2007_05, DSL.name("payment_p2007_05_staff_id_fkey"), Array(PaymentP2007_05.PAYMENT_P2007_05.STAFF_ID).asInstanceOf[Array[TableField[PaymentP2007_05Record, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_06__PAYMENT_P2007_06_CUSTOMER_ID_FKEY: ForeignKey[PaymentP2007_06Record, CustomerRecord] = Internal.createForeignKey(PaymentP2007_06.PAYMENT_P2007_06, DSL.name("payment_p2007_06_customer_id_fkey"), Array(PaymentP2007_06.PAYMENT_P2007_06.CUSTOMER_ID).asInstanceOf[Array[TableField[PaymentP2007_06Record, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_06__PAYMENT_P2007_06_RENTAL_ID_FKEY: ForeignKey[PaymentP2007_06Record, RentalRecord] = Internal.createForeignKey(PaymentP2007_06.PAYMENT_P2007_06, DSL.name("payment_p2007_06_rental_id_fkey"), Array(PaymentP2007_06.PAYMENT_P2007_06.RENTAL_ID).asInstanceOf[Array[TableField[PaymentP2007_06Record, ?] ] ], Keys.RENTAL_PKEY, Array(Rental.RENTAL.RENTAL_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val PAYMENT_P2007_06__PAYMENT_P2007_06_STAFF_ID_FKEY: ForeignKey[PaymentP2007_06Record, StaffRecord] = Internal.createForeignKey(PaymentP2007_06.PAYMENT_P2007_06, DSL.name("payment_p2007_06_staff_id_fkey"), Array(PaymentP2007_06.PAYMENT_P2007_06.STAFF_ID).asInstanceOf[Array[TableField[PaymentP2007_06Record, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val RENTAL__RENTAL_CUSTOMER_ID_FKEY: ForeignKey[RentalRecord, CustomerRecord] = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_customer_id_fkey"), Array(Rental.RENTAL.CUSTOMER_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], Keys.CUSTOMER_PKEY, Array(Customer.CUSTOMER.CUSTOMER_ID).asInstanceOf[Array[TableField[CustomerRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val RENTAL__RENTAL_INVENTORY_ID_FKEY: ForeignKey[RentalRecord, InventoryRecord] = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_inventory_id_fkey"), Array(Rental.RENTAL.INVENTORY_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], Keys.INVENTORY_PKEY, Array(Inventory.INVENTORY.INVENTORY_ID).asInstanceOf[Array[TableField[InventoryRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val RENTAL__RENTAL_STAFF_ID_FKEY: ForeignKey[RentalRecord, StaffRecord] = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_staff_id_fkey"), Array(Rental.RENTAL.STAFF_ID).asInstanceOf[Array[TableField[RentalRecord, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val STAFF__STAFF_ADDRESS_ID_FKEY: ForeignKey[StaffRecord, AddressRecord] = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_address_id_fkey"), Array(Staff.STAFF.ADDRESS_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], Keys.ADDRESS_PKEY, Array(Address.ADDRESS.ADDRESS_ID).asInstanceOf[Array[TableField[AddressRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val STAFF__STAFF_STORE_ID_FKEY: ForeignKey[StaffRecord, StoreRecord] = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_store_id_fkey"), Array(Staff.STAFF.STORE_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], Keys.STORE_PKEY, Array(Store.STORE.STORE_ID).asInstanceOf[Array[TableField[StoreRecord, ?] ] ], true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
  val STORE__STORE_ADDRESS_ID_FKEY: ForeignKey[StoreRecord, AddressRecord] = Internal.createForeignKey(Store.STORE, DSL.name("store_address_id_fkey"), Array(Store.STORE.ADDRESS_ID).asInstanceOf[Array[TableField[StoreRecord, ?] ] ], Keys.ADDRESS_PKEY, Array(Address.ADDRESS.ADDRESS_ID).asInstanceOf[Array[TableField[AddressRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
  val STORE__STORE_MANAGER_STAFF_ID_FKEY: ForeignKey[StoreRecord, StaffRecord] = Internal.createForeignKey(Store.STORE, DSL.name("store_manager_staff_id_fkey"), Array(Store.STORE.MANAGER_STAFF_ID).asInstanceOf[Array[TableField[StoreRecord, ?] ] ], Keys.STAFF_PKEY, Array(Staff.STAFF.STAFF_ID).asInstanceOf[Array[TableField[StaffRecord, ?] ] ], true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
}
