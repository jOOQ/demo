/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.Boolean
import java.lang.Long
import java.lang.String
import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.demo.skala.db.tables.Staff
import org.jooq.impl.UpdatableRecordImpl

import scala.Array
import scala.Byte


/**
 * This class is generated by jOOQ.
 */
class StaffRecord extends UpdatableRecordImpl[StaffRecord](Staff.STAFF) {

  /**
   * Setter for <code>public.staff.staff_id</code>.
   */
  def setStaffId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.staff.staff_id</code>.
   */
  def getStaffId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>public.staff.first_name</code>.
   */
  def setFirstName(value: String): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.staff.first_name</code>.
   */
  def getFirstName: String = get(1).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.last_name</code>.
   */
  def setLastName(value: String): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.staff.last_name</code>.
   */
  def getLastName: String = get(2).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.address_id</code>.
   */
  def setAddressId(value: Long): Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>public.staff.address_id</code>.
   */
  def getAddressId: Long = get(3).asInstanceOf[Long]

  /**
   * Setter for <code>public.staff.email</code>.
   */
  def setEmail(value: String): Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>public.staff.email</code>.
   */
  def getEmail: String = get(4).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.store_id</code>.
   */
  def setStoreId(value: Long): Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>public.staff.store_id</code>.
   */
  def getStoreId: Long = get(5).asInstanceOf[Long]

  /**
   * Setter for <code>public.staff.active</code>.
   */
  def setActive(value: Boolean): Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>public.staff.active</code>.
   */
  def getActive: Boolean = get(6).asInstanceOf[Boolean]

  /**
   * Setter for <code>public.staff.username</code>.
   */
  def setUsername(value: String): Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>public.staff.username</code>.
   */
  def getUsername: String = get(7).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.password</code>.
   */
  def setPassword(value: String): Unit = {
    set(8, value)
  }

  /**
   * Getter for <code>public.staff.password</code>.
   */
  def getPassword: String = get(8).asInstanceOf[String]

  /**
   * Setter for <code>public.staff.last_update</code>.
   */
  def setLastUpdate(value: LocalDateTime): Unit = {
    set(9, value)
  }

  /**
   * Getter for <code>public.staff.last_update</code>.
   */
  def getLastUpdate: LocalDateTime = get(9).asInstanceOf[LocalDateTime]

  /**
   * Setter for <code>public.staff.picture</code>.
   */
  def setPicture(value: Array[Byte]): Unit = {
    set(10, value)
  }

  /**
   * Getter for <code>public.staff.picture</code>.
   */
  def getPicture: Array[Byte] = get(10).asInstanceOf[Array[Byte]]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Long] = super.key.asInstanceOf[ Record1[Long] ]

  /**
   * Create a detached, initialised StaffRecord
   */
  def this(staffId : Long, firstName : String, lastName : String, addressId : Long, email : String, storeId : Long, active : Boolean, username : String, password : String, lastUpdate : LocalDateTime, picture : Array[Byte]) = {
    this()

    this.setStaffId(staffId)
    this.setFirstName(firstName)
    this.setLastName(lastName)
    this.setAddressId(addressId)
    this.setEmail(email)
    this.setStoreId(storeId)
    this.setActive(active)
    this.setUsername(username)
    this.setPassword(password)
    this.setLastUpdate(lastUpdate)
    this.setPicture(picture)
    resetTouchedOnNotNull()
  }

  /**
   * Create a detached, initialised StaffRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.Staff) = {
    this()

    if (value != null) {
      this.setStaffId(value.getStaffId)
      this.setFirstName(value.getFirstName)
      this.setLastName(value.getLastName)
      this.setAddressId(value.getAddressId)
      this.setEmail(value.getEmail)
      this.setStoreId(value.getStoreId)
      this.setActive(value.getActive)
      this.setUsername(value.getUsername)
      this.setPassword(value.getPassword)
      this.setLastUpdate(value.getLastUpdate)
      this.setPicture(value.getPicture)
      resetTouchedOnNotNull()
    }
  }
}
