/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.records


import java.lang.Long
import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.demo.skala.db.tables.Inventory
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
class InventoryRecord extends UpdatableRecordImpl[InventoryRecord](Inventory.INVENTORY) {

  /**
   * Setter for <code>public.inventory.inventory_id</code>.
   */
  def setInventoryId(value: Long): Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>public.inventory.inventory_id</code>.
   */
  def getInventoryId: Long = get(0).asInstanceOf[Long]

  /**
   * Setter for <code>public.inventory.film_id</code>.
   */
  def setFilmId(value: Long): Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>public.inventory.film_id</code>.
   */
  def getFilmId: Long = get(1).asInstanceOf[Long]

  /**
   * Setter for <code>public.inventory.store_id</code>.
   */
  def setStoreId(value: Long): Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>public.inventory.store_id</code>.
   */
  def getStoreId: Long = get(2).asInstanceOf[Long]

  /**
   * Setter for <code>public.inventory.last_update</code>.
   */
  def setLastUpdate(value: LocalDateTime): Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>public.inventory.last_update</code>.
   */
  def getLastUpdate: LocalDateTime = get(3).asInstanceOf[LocalDateTime]

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  override def key: Record1[Long] = super.key.asInstanceOf[ Record1[Long] ]

  /**
   * Create a detached, initialised InventoryRecord
   */
  def this(inventoryId : Long, filmId : Long, storeId : Long, lastUpdate : LocalDateTime) = {
    this()

    this.setInventoryId(inventoryId)
    this.setFilmId(filmId)
    this.setStoreId(storeId)
    this.setLastUpdate(lastUpdate)
    resetTouchedOnNotNull()
  }

  /**
   * Create a detached, initialised InventoryRecord
   */
  def this(value: org.jooq.demo.skala.db.tables.pojos.Inventory) = {
    this()

    if (value != null) {
      this.setInventoryId(value.getInventoryId)
      this.setFilmId(value.getFilmId)
      this.setStoreId(value.getStoreId)
      this.setLastUpdate(value.getLastUpdate)
      resetTouchedOnNotNull()
    }
  }
}
