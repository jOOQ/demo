/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.skala.db.tables.daos


import java.lang.Boolean
import java.lang.Integer
import java.lang.Long
import java.lang.String
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.Collection
import java.util.List

import org.jooq.Configuration
import org.jooq.demo.skala.db.tables.Customer
import org.jooq.demo.skala.db.tables.records.CustomerRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
class CustomerDao(configuration: Configuration) extends DAOImpl[CustomerRecord, org.jooq.demo.skala.db.tables.pojos.Customer, Long](Customer.CUSTOMER, classOf[org.jooq.demo.skala.db.tables.pojos.Customer], configuration) {

  /**
   * Create a new CustomerDao without any configuration
   */
  def this() = this(null)

  override def getId(o: org.jooq.demo.skala.db.tables.pojos.Customer): Long = o.getCustomerId
  override def insert(obj: org.jooq.demo.skala.db.tables.pojos.Customer): Unit = super.insert(obj)
  override def insert(objs: org.jooq.demo.skala.db.tables.pojos.Customer*): Unit = super.insert(objs*)
  override def insert(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Customer]): Unit = super.insert(objs)
  override def update(obj: org.jooq.demo.skala.db.tables.pojos.Customer): Unit = super.update(obj)
  override def update(objs: org.jooq.demo.skala.db.tables.pojos.Customer*): Unit = super.update(objs*)
  override def update(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Customer]): Unit = super.update(objs)
  override def merge(obj: org.jooq.demo.skala.db.tables.pojos.Customer): Unit = super.merge(obj)
  override def merge(objs: org.jooq.demo.skala.db.tables.pojos.Customer*): Unit = super.merge(objs*)
  override def merge(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Customer]): Unit = super.merge(objs)
  override def delete(obj: org.jooq.demo.skala.db.tables.pojos.Customer): Unit = super.delete(obj)
  override def delete(objs: org.jooq.demo.skala.db.tables.pojos.Customer*): Unit = super.delete(objs*)
  override def delete(objs: Collection[org.jooq.demo.skala.db.tables.pojos.Customer]): Unit = super.delete(objs)
  override def deleteById(id: Long): Unit = super.deleteById(id)
  override def deleteById(ids: Long*): Unit = super.deleteById(ids*)
  override def deleteById(ids: Collection[Long]): Unit = super.deleteById(ids)

  /**
   * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfCustomerId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.CUSTOMER_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>customer_id IN (values)</code>
   */
  def fetchByCustomerId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.CUSTOMER_ID, values*)

  /**
   * Fetch a unique record that has <code>customer_id = value</code>
   */
  def fetchOneByCustomerId(value: Long): org.jooq.demo.skala.db.tables.pojos.Customer = fetchOne(Customer.CUSTOMER.CUSTOMER_ID, value)

  /**
   * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfStoreId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.STORE_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>store_id IN (values)</code>
   */
  def fetchByStoreId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.STORE_ID, values*)

  /**
   * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfFirstName(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.FIRST_NAME, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>first_name IN (values)</code>
   */
  def fetchByFirstName(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.FIRST_NAME, values*)

  /**
   * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastName(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.LAST_NAME, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_name IN (values)</code>
   */
  def fetchByLastName(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.LAST_NAME, values*)

  /**
   * Fetch records that have <code>email BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfEmail(lowerInclusive: String, upperInclusive: String): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.EMAIL, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>email IN (values)</code>
   */
  def fetchByEmail(values: String*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.EMAIL, values*)

  /**
   * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfAddressId(lowerInclusive: Long, upperInclusive: Long): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.ADDRESS_ID, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>address_id IN (values)</code>
   */
  def fetchByAddressId(values: Long*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.ADDRESS_ID, values*)

  /**
   * Fetch records that have <code>activebool BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfActivebool(lowerInclusive: Boolean, upperInclusive: Boolean): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.ACTIVEBOOL, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>activebool IN (values)</code>
   */
  def fetchByActivebool(values: Boolean*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.ACTIVEBOOL, values*)

  /**
   * Fetch records that have <code>create_date BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfCreateDate(lowerInclusive: LocalDate, upperInclusive: LocalDate): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.CREATE_DATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>create_date IN (values)</code>
   */
  def fetchByCreateDate(values: LocalDate*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.CREATE_DATE, values*)

  /**
   * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime, upperInclusive: LocalDateTime): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.LAST_UPDATE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>last_update IN (values)</code>
   */
  def fetchByLastUpdate(values: LocalDateTime*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.LAST_UPDATE, values*)

  /**
   * Fetch records that have <code>active BETWEEN lowerInclusive AND
   * upperInclusive</code>
   */
  def fetchRangeOfActive(lowerInclusive: Integer, upperInclusive: Integer): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetchRange(Customer.CUSTOMER.ACTIVE, lowerInclusive, upperInclusive)

  /**
   * Fetch records that have <code>active IN (values)</code>
   */
  def fetchByActive(values: Integer*): List[org.jooq.demo.skala.db.tables.pojos.Customer] = fetch(Customer.CUSTOMER.ACTIVE, values*)
}
