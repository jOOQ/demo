<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>org.jooq</groupId>
    <artifactId>jooq-demo</artifactId>
    <version>3.19.18</version>
    <name>jOOQ Demo (Open Source Edition)</name>
    <packaging>pom</packaging>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>http://www.jooq.org/inc/LICENSE.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- We're using the JDK 17 version which you can download from https://www.jooq.org/download/versions -->
        <jooq.version>3.19.18</jooq.version>
        <flyway.version>8.5.11</flyway.version>
        <postgres.version>42.7.2</postgres.version>
        <log4j.version>2.17.1</log4j.version>
        <junit.version>4.13.2</junit.version>
        <kotlin.version>1.6.21</kotlin.version>
        <scala.version>2.13.12</scala.version>
        <testcontainers.version>1.16.3</testcontainers.version>
        <jetbrains.annotations.version>23.0.0</jetbrains.annotations.version>

        <db.username>postgres</db.username>
        <db.password>postgres</db.password>
    </properties>

    <modules>
        <module>jOOQ-demo-utils</module>
        <module>jOOQ-demo-java</module>
        <module>jOOQ-demo-kotlin</module>
        <module>jOOQ-demo-scala</module>
    </modules>

    <dependencyManagement>
        <dependencies>

            <!-- Demo utilities -->
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-demo-utils</artifactId>
                <version>${jooq.version}</version>
            </dependency>

            <!-- Database access -->
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq</artifactId>
                <version>${jooq.version}</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgres.version}</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>r2dbc-postgresql</artifactId>
                <version>1.0.0.RELEASE</version>
            </dependency>
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway.version}</version>
            </dependency>

            <!-- Reactive streams. Use your own implementation if you prefer another one -->
            <dependency>
                <groupId>io.projectreactor</groupId>
                <artifactId>reactor-core</artifactId>
                <version>3.4.18</version>
            </dependency>

            <!-- Logging -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j18-impl</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!-- Some optional transitive dependencies -->
            <dependency>
                <groupId>org.jetbrains</groupId>
                <artifactId>annotations</artifactId>
                <version>${jetbrains.annotations.version}</version>
            </dependency>

            <!-- Testing -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <type>jar</type>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>postgresql</artifactId>
                <version>${testcontainers.version}</version>
            </dependency>

            <!-- Kotlin -->
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-kotlin</artifactId>
                <version>${jooq.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-kotlin-coroutines</artifactId>
                <version>${jooq.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib-jdk8</artifactId>
                <version>${kotlin.version}</version>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-test</artifactId>
                <version>${kotlin.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-stdlib-jdk8</artifactId>
                <version>${kotlin.version}</version>
            </dependency>

            <!-- Scala -->
            <dependency>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-scala_2.13</artifactId>
                <version>${jooq.version}</version>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-library</artifactId>
                <version>${scala.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.scala-lang</groupId>
                <artifactId>scala-compiler</artifactId>
                <version>${scala.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.10.1</version>
                    <configuration>
                        <release>17</release>
                        <source>17</source>
                        <target>17</target>
                    </configuration>
                </plugin>

                <!-- Much better if there was a testcontainers lifecycle management plugin!
                     Upvote here if you like the idea: https://github.com/testcontainers/testcontainers-java/issues/4397 -->
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>groovy-maven-plugin</artifactId>
                    <version>2.1.1</version>
                    <executions>
                        <execution>

                            <!-- Start testcontainers before code generation -->
                            <id>testcontainers-start</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    db = new org.testcontainers.containers.PostgreSQLContainer("postgres:latest")
                                            .withUsername("${db.username}")
                                            .withDatabaseName("postgres")
                                            .withPassword("${db.password}")

                                    db.start()
                                    project.properties.setProperty('db.url', db.getJdbcUrl())
                                    project.properties.setProperty('testcontainers.containerId', db.getContainerId());
                                    project.properties.setProperty('testcontainers.imageName', db.getDockerImageName());
                                </source>
                            </configuration>
                        </execution>
                        <execution>

                            <!-- Stop testcontainers after tests have completed -->
                            <id>testcontainers-stop</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>execute</goal>
                            </goals>
                            <configuration>
                                <source>
                                    containerId = "${testcontainers.containerId}"
                                    imageName = "${testcontainers.imageName}"
                                    println("Stopping testcontainer $containerId - $imageName")
                                    org.testcontainers.utility.ResourceReaper
                                            .instance()
                                            .stopAndRemoveContainer(containerId, imageName);
                                </source>
                            </configuration>
                        </execution>
                    </executions>

                    <dependencies>
                        <dependency>
                            <groupId>org.testcontainers</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${testcontainers.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <plugin>
                    <groupId>org.flywaydb</groupId>
                    <artifactId>flyway-maven-plugin</artifactId>
                    <version>${flyway.version}</version>
                    <executions>
                        <execution>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>migrate</goal>
                            </goals>
                        </execution>
                    </executions>

                    <configuration>
                        <!-- This URL is exported by testcontainers above -->
                        <url>${db.url}</url>
                        <user>${db.username}</user>
                        <password>${db.password}</password>
                        <locations>
                            <location>filesystem:../../sakila/postgres</location>
                        </locations>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.jooq</groupId>
                    <artifactId>jooq-codegen-maven</artifactId>
                    <version>${jooq.version}</version>

                    <!-- Common code generation configuration that applies for all language examples -->
                    <configuration>
                        <onUnused>SILENT</onUnused>
                        <jdbc>
                            <driver>org.postgresql.Driver</driver>
                            <!-- This URL is exported by testcontainers above -->
                            <url>${db.url}</url>
                            <user>${db.username}</user>
                            <password>${db.password}</password>
                        </jdbc>
                        <generator>
                            <database>
                                <inputSchema>public</inputSchema>
                                <excludes>flyway_.*</excludes>

                                <syntheticObjects>

                                    <!-- We want to treat all the LAST_UPDATE columns as readonly, i.e. users aren't
                                         supposed to be able to write to that column. It is populated by a trigger

                                         This is a commercial edition only feature.
                                         See: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-synthetic-objects/codegen-database-synthetic-readonly-columns/
                                         -->
                                    <readonlyColumns>
                                        <readonlyColumn>
                                            <tables>.*</tables>
                                            <fields>last_update</fields>
                                        </readonlyColumn>
                                    </readonlyColumns>

                                    <!-- Use synthetic column declarations for your virtual client side computed columns.
                                         While the synthetic column declaration is generation language agnostic, the
                                         generator itself is not, so please refer to the individual language demos to see
                                         how a computed column is configured.

                                         See: https://www.jooq.org/doc/latest/manual/code-generation/codegen-advanced/codegen-config-database/codegen-database-synthetic-objects/codegen-database-synthetic-columns/
                                         -->
                                    <columns>
                                        <column>
                                            <tables>staff|store</tables>
                                            <name>full_address</name>
                                            <type>text</type>
                                        </column>
                                        <column>
                                            <tables>staff</tables>
                                            <name>full_name</name>
                                            <type>text</type>
                                        </column>
                                    </columns>
                                </syntheticObjects>
                            </database>
                            <generate>
                                <pojos>true</pojos>
                                <pojosToString>false</pojosToString>
                                <pojosEqualsAndHashCode>false</pojosEqualsAndHashCode>
                                <daos>true</daos>
                            </generate>
                        </generator>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
