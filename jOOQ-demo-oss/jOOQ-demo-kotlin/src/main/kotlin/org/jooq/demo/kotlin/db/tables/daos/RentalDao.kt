/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.demo.kotlin.db.tables.Rental
import org.jooq.demo.kotlin.db.tables.records.RentalRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class RentalDao(configuration: Configuration?) : DAOImpl<RentalRecord, org.jooq.demo.kotlin.db.tables.pojos.Rental, Long>(Rental.RENTAL, org.jooq.demo.kotlin.db.tables.pojos.Rental::class.java, configuration) {

    /**
     * Create a new RentalDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.demo.kotlin.db.tables.pojos.Rental): Long? = o.rentalId

    /**
     * Fetch records that have <code>rental_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRentalId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.RENTAL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_id IN (values)</code>
     */
    fun fetchByRentalId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.RENTAL_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>rental_id = value</code>
     */
    fun fetchOneByRentalId(value: Long): org.jooq.demo.kotlin.db.tables.pojos.Rental? = fetchOne(Rental.RENTAL.RENTAL_ID, value)

    /**
     * Fetch records that have <code>rental_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRentalDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.RENTAL_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_date IN (values)</code>
     */
    fun fetchByRentalDate(vararg values: LocalDateTime): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.RENTAL_DATE, *values)

    /**
     * Fetch records that have <code>inventory_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfInventoryId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.INVENTORY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inventory_id IN (values)</code>
     */
    fun fetchByInventoryId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.INVENTORY_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCustomerId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.CUSTOMER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    fun fetchByCustomerId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.CUSTOMER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>return_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReturnDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.RETURN_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>return_date IN (values)</code>
     */
    fun fetchByReturnDate(vararg values: LocalDateTime): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.RETURN_DATE, *values)

    /**
     * Fetch records that have <code>staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStaffId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.STAFF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>staff_id IN (values)</code>
     */
    fun fetchByStaffId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.STAFF_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetchRange(Rental.RENTAL.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.demo.kotlin.db.tables.pojos.Rental> = fetch(Rental.RENTAL.LAST_UPDATE, *values)
}
