/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.demo.kotlin.db.tables.Store
import org.jooq.demo.kotlin.db.tables.records.StoreRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class StoreDao(configuration: Configuration?) : DAOImpl<StoreRecord, org.jooq.demo.kotlin.db.tables.pojos.Store, Long>(Store.STORE, org.jooq.demo.kotlin.db.tables.pojos.Store::class.java, configuration) {

    /**
     * Create a new StoreDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.demo.kotlin.db.tables.pojos.Store): Long? = o.storeId

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStoreId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetchRange(Store.STORE.STORE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    fun fetchByStoreId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetch(Store.STORE.STORE_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    fun fetchOneByStoreId(value: Long): org.jooq.demo.kotlin.db.tables.pojos.Store? = fetchOne(Store.STORE.STORE_ID, value)

    /**
     * Fetch records that have <code>manager_staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfManagerStaffId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetchRange(Store.STORE.MANAGER_STAFF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>manager_staff_id IN (values)</code>
     */
    fun fetchByManagerStaffId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetch(Store.STORE.MANAGER_STAFF_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAddressId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetchRange(Store.STORE.ADDRESS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    fun fetchByAddressId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetch(Store.STORE.ADDRESS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetchRange(Store.STORE.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.demo.kotlin.db.tables.pojos.Store> = fetch(Store.STORE.LAST_UPDATE, *values)
}
