/*
 * This file is generated by jOOQ.
 */
package org.jooq.demo.kotlin.db.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.demo.kotlin.db.enums.MpaaRating
import org.jooq.demo.kotlin.db.tables.Film
import org.jooq.demo.kotlin.db.tables.records.FilmRecord
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class FilmDao(configuration: Configuration?) : DAOImpl<FilmRecord, org.jooq.demo.kotlin.db.tables.pojos.Film, Long>(Film.FILM, org.jooq.demo.kotlin.db.tables.pojos.Film::class.java, configuration) {

    /**
     * Create a new FilmDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: org.jooq.demo.kotlin.db.tables.pojos.Film): Long? = o.filmId

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFilmId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByFilmId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.FILM_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>film_id = value</code>
     */
    fun fetchOneByFilmId(value: Long): org.jooq.demo.kotlin.db.tables.pojos.Film? = fetchOne(Film.FILM.FILM_ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTitle(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByTitle(vararg values: String): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.TITLE, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>release_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReleaseYear(lowerInclusive: Int?, upperInclusive: Int?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.RELEASE_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>release_year IN (values)</code>
     */
    fun fetchByReleaseYear(vararg values: Int): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.RELEASE_YEAR, *values.toTypedArray())

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLanguageId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    fun fetchByLanguageId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.LANGUAGE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>original_language_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfOriginalLanguageId(lowerInclusive: Long?, upperInclusive: Long?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.ORIGINAL_LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>original_language_id IN (values)</code>
     */
    fun fetchByOriginalLanguageId(vararg values: Long): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.ORIGINAL_LANGUAGE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>rental_duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRentalDuration(lowerInclusive: Short?, upperInclusive: Short?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.RENTAL_DURATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_duration IN (values)</code>
     */
    fun fetchByRentalDuration(vararg values: Short): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.RENTAL_DURATION, *values.toTypedArray())

    /**
     * Fetch records that have <code>rental_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRentalRate(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.RENTAL_RATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_rate IN (values)</code>
     */
    fun fetchByRentalRate(vararg values: BigDecimal): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.RENTAL_RATE, *values)

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLength(lowerInclusive: Short?, upperInclusive: Short?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.LENGTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    fun fetchByLength(vararg values: Short): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.LENGTH, *values.toTypedArray())

    /**
     * Fetch records that have <code>replacement_cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfReplacementCost(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.REPLACEMENT_COST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>replacement_cost IN (values)</code>
     */
    fun fetchByReplacementCost(vararg values: BigDecimal): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.REPLACEMENT_COST, *values)

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfRating(lowerInclusive: MpaaRating?, upperInclusive: MpaaRating?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.RATING, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    fun fetchByRating(vararg values: MpaaRating): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.RATING, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByLastUpdate(vararg values: LocalDateTime): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.LAST_UPDATE, *values)

    /**
     * Fetch records that have <code>special_features BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSpecialFeatures(lowerInclusive: Array<String?>?, upperInclusive: Array<String?>?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.SPECIAL_FEATURES, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>special_features IN (values)</code>
     */
    fun fetchBySpecialFeatures(vararg values: Array<String?>): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.SPECIAL_FEATURES, *values)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun fetchRangeOfFulltext(lowerInclusive: Any?, upperInclusive: Any?): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetchRange(Film.FILM.FULLTEXT, lowerInclusive, upperInclusive)
    @Deprecated(message = "Unknown data type. If this is a qualified, user-defined type, it may have been excluded from code generation. If this is a built-in type, you can define an explicit org.jooq.Binding to specify how this type should be handled. Deprecation can be turned off using <deprecationOnUnknownTypes/> in your code generator configuration.")
    fun fetchByFulltext(vararg values: Any): List<org.jooq.demo.kotlin.db.tables.pojos.Film> = fetch(Film.FILM.FULLTEXT, *values)
}
